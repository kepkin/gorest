// Code generated by gorest; DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
	"github.com/gin-gonic/gin"
	"github.com/shopspring/decimal"
	"net/http"
	"strconv"
	"strings"
	"time"
)

const handlerNameKey = "handler"

type ParamPlace int

const (
	UndefinedPlace ParamPlace = iota
	InBody
	InCookie
	InFormData
	InHeader
	InPath
	InQuery
)

type ContentType int

const (
	UndefinedContentType ContentType = iota
	AppJSON
	AppXML
	AppFormUrlencoded
	MultipartFormData
	TextPlain
)

type FieldError struct {
	In      ParamPlace
	Field   string
	Message string
	Reason  error
}

func NewFieldError(in ParamPlace, f string, msg string, err error) FieldError {
	return FieldError{
		In:      in,
		Field:   f,
		Message: msg,
		Reason:  err,
	}
}

func booleanConverter(input []string) (bool, error) {
	if len(input) == 0 {
		return false, fmt.Errorf("got empty value instead of boolean", input)
	}

	if len(input) > 1 {
		return false, fmt.Errorf("got array '%v' instead of boolean", input)
	}

	switch strings.ToLower(input[0]) {
	case "1", "true", "t":
		return true, nil
	case "0", "false", "f":
		return false, nil
	default:
		return false, fmt.Errorf("can't parse '%v' as boolean", input[0])
	}
}

func stringDateConverter(input []string) (time.Time, error) {
	if len(input) > 1 {
		return time.Time{}, fmt.Errorf("got array '%v' instead of string", input)
	}

	return time.Parse(time.RFC3339, input[0])
}

func stringDateTimeConverter(input []string) (time.Time, error) {
	return stringDateConverter(input)
}

func stringUnixTimeConverter(input []string) (time.Time, error) {
	if len(input) > 1 {
		return time.Time{}, fmt.Errorf("got array '%v' instead of unix-time", input)
	}

	fromDateSec, err := strconv.ParseInt(input[0], 10, 64)
	if err != nil {
		return time.Time{}, err
	}

	return time.Unix(fromDateSec, 0), err
}

func stringEmailConverter(input []string) (string, error) {
	if len(input) > 1 {
		return "", fmt.Errorf("got array '%v' instead of string", input)
	}

	//TODO: write email check

	return input[0], nil
}

func stringBinaryConverter(input []string) ([]byte, error) {
	if len(input) > 1 {
		return []byte{}, fmt.Errorf("got array '%v' instead of string", input)
	}

	return []byte(input[0]), nil
}

func stringConverter(input []string) (string, error) {
	if len(input) > 1 {
		return "", fmt.Errorf("got array '%v' instead of string", input)
	}

	return input[0], nil
}

func integerInt64Converter(input []string) (int64, error) {
	if len(input) > 1 {
		return 0, fmt.Errorf("got array '%v' instead of integer", input)
	}

	return strconv.ParseInt(input[0], 10, 64)
}

func integerConverter(input []string) (int, error) {
	v, err := integerInt64Converter(input)
	return int(v), err
}

func integerDecimalConverter(input []string) (decimal.Decimal, error) {
	if len(input) > 1 {
		return decimal.Decimal{}, fmt.Errorf("got array '%v' instead of decimal", input)
	}

	return decimal.NewFromString(input[0])
}

func ginGetCookie(c *gin.Context, param string) (string, bool) {
	cookie, err := c.Request.Cookie(param)
	if err == http.ErrNoCookie {
		return "", false
	}
	return cookie.Value, true
}

func __gin_get_parameter(c *gin.Context, in string, parameterName string) ([]string, bool, error) {
	if in == "cookie" {
		data, existed := ginGetCookie(c, parameterName)
		return []string{data}, existed, nil
	} else if in == "header" {
		data := c.Request.Header.Get(parameterName)
		return []string{data}, len(data) != 0, nil
	} else if in == "path" {
		data, existed := c.Params.Get(parameterName)
		return []string{data}, existed, nil
	} else if in == "query" {
		data, existed := c.Request.URL.Query()[parameterName]
		return data, existed, nil
	} else if in == "body" {
		data, existed := c.GetPostFormArray(parameterName)
		if existed == false && c.Request.MultipartForm != nil && c.Request.MultipartForm.File != nil {
			fhs, ok := c.Request.MultipartForm.File[parameterName]
			if !ok {
				return []string{}, ok, nil
			}

			return []string{fhs[0].Filename}, ok, nil
		}

		return data, existed, nil
	}

	return []string{}, false, fmt.Errorf("Unsupported 'in': %v", in)
}

type PaymentGatewayAPI interface {
	// GET /v1/example/:year/:user
	Example(in ExampleRequest, c *gin.Context)

	// GET /v1/files/:filename
	GetFile(in GetFileRequest, c *gin.Context)

	// GET /v1/payment
	GetPayment(in GetPaymentRequest, c *gin.Context)
	// POST /v1/payment
	ProvidePayment(in ProvidePaymentRequest, c *gin.Context)

	// POST /v1/user
	CreateUser(in CreateUserRequest, c *gin.Context)

	// GET /v1/user/:userId
	GetUser(in GetUserRequest, c *gin.Context)

	// Service methods
	ProcessMakeRequestErrors(c *gin.Context, errors []FieldError)
	ProcessValidateErrors(c *gin.Context, errors []FieldError)
}

type PaymentGatewayAPIServer struct {
	Srv PaymentGatewayAPI
}

// _PaymentGatewayAPI_Example_Handler

type ExampleRequest struct {
	Path  ExampleRequestPath  `json:"Path"`
	Query ExampleRequestQuery `json:"Query"`
}

type ExampleRequestPath struct {
	User string `json:"user"`
	Year int64  `json:"year"`
}

type ExampleRequestQuery struct {
	Debug    bool            `json:"debug"`
	From     time.Time       `json:"from"`
	FromDate time.Time       `json:"fromDate"`
	Sum      decimal.Decimal `json:"sum"`
	Test     string          `json:"test"`
	To       time.Time       `json:"to"`
}

func (server PaymentGatewayAPIServer) _PaymentGatewayAPI_Example_Handler(c *gin.Context) {
	c.Set(handlerNameKey, "Example")

	var req ExampleRequest
	dataQueryTest, _, err := __gin_get_parameter(c, "query", "test")
	if err != nil {
		server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InQuery, "-", "", err)})
		return
	}
	req.Query.Test, err = stringConverter(dataQueryTest)
	if err != nil {
		server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InQuery, "-", "", err)})
		return
	}
	dataPathYear, _, err := __gin_get_parameter(c, "path", "year")
	if err != nil {
		server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InPath, "-", "", err)})
		return
	}
	req.Path.Year, err = integerInt64Converter(dataPathYear)
	if err != nil {
		server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InPath, "-", "", err)})
		return
	}
	dataPathUser, _, err := __gin_get_parameter(c, "path", "user")
	if err != nil {
		server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InPath, "-", "", err)})
		return
	}
	req.Path.User, err = stringConverter(dataPathUser)
	if err != nil {
		server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InPath, "-", "", err)})
		return
	}
	dataQueryDebug, _, err := __gin_get_parameter(c, "query", "debug")
	if err != nil {
		server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InQuery, "-", "", err)})
		return
	}
	req.Query.Debug, err = booleanConverter(dataQueryDebug)
	if err != nil {
		server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InQuery, "-", "", err)})
		return
	}
	dataQuerySum, _, err := __gin_get_parameter(c, "query", "sum")
	if err != nil {
		server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InQuery, "-", "", err)})
		return
	}
	req.Query.Sum, err = integerDecimalConverter(dataQuerySum)
	if err != nil {
		server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InQuery, "-", "", err)})
		return
	}
	dataQueryFromDate, _, err := __gin_get_parameter(c, "query", "fromDate")
	if err != nil {
		server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InQuery, "-", "", err)})
		return
	}
	req.Query.FromDate, err = stringDateConverter(dataQueryFromDate)
	if err != nil {
		server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InQuery, "-", "", err)})
		return
	}
	dataQueryFrom, _, err := __gin_get_parameter(c, "query", "from")
	if err != nil {
		server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InQuery, "-", "", err)})
		return
	}
	req.Query.From, err = stringDateTimeConverter(dataQueryFrom)
	if err != nil {
		server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InQuery, "-", "", err)})
		return
	}
	dataQueryTo, _, err := __gin_get_parameter(c, "query", "to")
	if err != nil {
		server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InQuery, "-", "", err)})
		return
	}
	req.Query.To, err = stringUnixTimeConverter(dataQueryTo)
	if err != nil {
		server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InQuery, "-", "", err)})
		return
	}

	server.Srv.Example(req, c)
}

// _PaymentGatewayAPI_GetFile_Handler

type GetFileRequest struct {
	Path GetFileRequestPath `json:"Path"`
}

type GetFileRequestPath struct {
	Filename string `json:"filename"`
}

func (server PaymentGatewayAPIServer) _PaymentGatewayAPI_GetFile_Handler(c *gin.Context) {
	c.Set(handlerNameKey, "GetFile")

	var req GetFileRequest
	dataPathFilename, _, err := __gin_get_parameter(c, "path", "filename")
	if err != nil {
		server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InPath, "-", "", err)})
		return
	}
	req.Path.Filename, err = stringConverter(dataPathFilename)
	if err != nil {
		server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InPath, "-", "", err)})
		return
	}

	server.Srv.GetFile(req, c)
}

// _PaymentGatewayAPI_GetPayment_Handler

type GetPaymentRequest struct {
	Query GetPaymentRequestQuery `json:"Query"`
}

type GetPaymentRequestQuery struct {
	Async string `json:"async"`
	ID    string `json:"id"`
}

func (server PaymentGatewayAPIServer) _PaymentGatewayAPI_GetPayment_Handler(c *gin.Context) {
	c.Set(handlerNameKey, "GetPayment")

	var req GetPaymentRequest
	dataQueryID, _, err := __gin_get_parameter(c, "query", "id")
	if err != nil {
		server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InQuery, "-", "", err)})
		return
	}
	req.Query.ID, err = stringConverter(dataQueryID)
	if err != nil {
		server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InQuery, "-", "", err)})
		return
	}
	dataQueryAsync, _, err := __gin_get_parameter(c, "query", "async")
	if err != nil {
		server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InQuery, "-", "", err)})
		return
	}
	req.Query.Async, err = stringConverter(dataQueryAsync)
	if err != nil {
		server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InQuery, "-", "", err)})
		return
	}

	server.Srv.GetPayment(req, c)
}

// _PaymentGatewayAPI_ProvidePayment_Handler

type ProvidePaymentRequest struct {
	Body ProvidePaymentRequestBody `json:"Body"`
}

type ProvidePaymentRequestBody struct {
	JSON Payment `json:"JSON"`
}

func (server PaymentGatewayAPIServer) _PaymentGatewayAPI_ProvidePayment_Handler(c *gin.Context) {
	c.Set(handlerNameKey, "ProvidePayment")

	var req ProvidePaymentRequest

	contentType := c.Request.Header.Get("Content-Type")

	if contentType == "" {
		server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InBody, "-", "unsupported Content-type", nil)})
		return
	}
	contentType = strings.Split(contentType, ";")[0]

	//TODO: refactor
	switch contentType {

	case "application/json":
		if err := json.NewDecoder(c.Request.Body).Decode(&req.Body.JSON); err != nil {
			server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InBody, "-", "can't decode body from JSON", err)})
			return
		}
	}
	server.Srv.ProvidePayment(req, c)
}

// _PaymentGatewayAPI_CreateUser_Handler

type CreateUserRequest struct {
	Body CreateUserRequestBody `json:"Body"`
}

type CreateUserRequestBody struct {
	Form CreateUserRequestBodyForm `json:"Form"`
}

type CreateUserRequestBodyForm struct {
	Age    int64  `json:"age"`
	Avatar []byte `json:"avatar"`
	Email  string `json:"email"`
	Name   string `json:"name"`
}

func (server PaymentGatewayAPIServer) _PaymentGatewayAPI_CreateUser_Handler(c *gin.Context) {
	c.Set(handlerNameKey, "CreateUser")

	var req CreateUserRequest

	contentType := c.Request.Header.Get("Content-Type")

	if contentType == "" {
		server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InBody, "-", "unsupported Content-type", nil)})
		return
	}
	contentType = strings.Split(contentType, ";")[0]

	//TODO: refactor
	switch contentType {

	case "multipart/form-data":
		dataBodyAge, _, err := __gin_get_parameter(c, "body", "age")
		if err != nil {
			server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InBody, "-", "", err)})
			return
		}
		req.Body.Form.Age, err = integerConverter(dataBodyAge)
		if err != nil {
			server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InBody, "-", "", err)})
			return
		}
		dataBodyAvatar, _, err := __gin_get_parameter(c, "body", "avatar")
		if err != nil {
			server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InBody, "-", "", err)})
			return
		}
		req.Body.Form.Avatar, err = stringBinaryConverter(dataBodyAvatar)
		if err != nil {
			server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InBody, "-", "", err)})
			return
		}
		dataBodyEmail, _, err := __gin_get_parameter(c, "body", "email")
		if err != nil {
			server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InBody, "-", "", err)})
			return
		}
		req.Body.Form.Email, err = stringEmailConverter(dataBodyEmail)
		if err != nil {
			server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InBody, "-", "", err)})
			return
		}
		dataBodyName, _, err := __gin_get_parameter(c, "body", "name")
		if err != nil {
			server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InBody, "-", "", err)})
			return
		}
		req.Body.Form.Name, err = stringConverter(dataBodyName)
		if err != nil {
			server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InBody, "-", "", err)})
			return
		}

	}
	server.Srv.CreateUser(req, c)
}

// _PaymentGatewayAPI_GetUser_Handler

type GetUserRequest struct {
	Path GetUserRequestPath `json:"Path"`
}

type GetUserRequestPath struct {
	UserID string `json:"userId"`
}

func (server PaymentGatewayAPIServer) _PaymentGatewayAPI_GetUser_Handler(c *gin.Context) {
	c.Set(handlerNameKey, "GetUser")

	var req GetUserRequest
	dataPathUserID, _, err := __gin_get_parameter(c, "path", "userId")
	if err != nil {
		server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InPath, "-", "", err)})
		return
	}
	req.Path.UserID, err = stringConverter(dataPathUserID)
	if err != nil {
		server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InPath, "-", "", err)})
		return
	}

	server.Srv.GetUser(req, c)
}

// Router
func RegisterRoutes(r *gin.Engine, api PaymentGatewayAPI) {
	e := &PaymentGatewayAPIServer{api}

	r.Handle("GET", "/v1/example/:year/:user", e._PaymentGatewayAPI_Example_Handler)

	r.Handle("GET", "/v1/files/:filename", e._PaymentGatewayAPI_GetFile_Handler)

	r.Handle("GET", "/v1/payment", e._PaymentGatewayAPI_GetPayment_Handler)
	r.Handle("POST", "/v1/payment", e._PaymentGatewayAPI_ProvidePayment_Handler)

	r.Handle("POST", "/v1/user", e._PaymentGatewayAPI_CreateUser_Handler)

	r.Handle("GET", "/v1/user/:userId", e._PaymentGatewayAPI_GetUser_Handler)
}

type ID string

type Payment struct {
	MerchantID string          `json:"merchant_id"`
	Sum        decimal.Decimal `json:"sum"`
	Type       string          `json:"type"`
}
type Payments Payment
