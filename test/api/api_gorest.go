// Code generated by gorest; DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
	"strconv"
	"time"

	"github.com/gin-gonic/gin"
)

const handlerNameKey = "handler"

type ParamPlace int

const (
	UndefinedPlace ParamPlace = iota
	InBody
	InCookie
	InHeader
	InPath
	InQuery
)

type ContentType int

const (
	UndefinedContentType ContentType = iota
	AppJSON
	AppXML
	AppFormUrlencoded
	TextPlain
)

type FieldError struct {
	In      ParamPlace
	Field   string
	Message string
	Reason  error
}

func NewFieldError(in ParamPlace, f string, msg string, err error) FieldError {
	return FieldError{
		In:      in,
		Field:   f,
		Message: msg,
		Reason:  err,
	}
}

type PaymentGatewayAPI interface {
	// GET /v1/example/:year/:user
	Example(in ExampleRequest, c *gin.Context)

	// GET /v1/payment
	GetPayment(in GetPaymentRequest, c *gin.Context)
	// POST /v1/payment
	ProvidePayment(in ProvidePaymentRequest, c *gin.Context)

	// Service methods
	ProcessMakeRequestErrors(c *gin.Context, errors []FieldError)
	ProcessValidateErrors(c *gin.Context, errors []FieldError)
}

type PaymentGatewayAPIServer struct {
	Srv PaymentGatewayAPI
}

// _PaymentGatewayAPI_Example_Handler

type ExampleRequest struct {
	Path  ExampleRequestPath
	Query ExampleRequestQuery
}

func (t ExampleRequest) Validate() (errors []FieldError) {
	// Path field validators
	errors = t.Path.Validate()
	if errors != nil {
		return
	}
	// Query field validators
	errors = t.Query.Validate()
	if errors != nil {
		return
	}
	return
}

type ExampleRequestPath struct {
	User ExampleRequestPathUser
	Year int64
}

func (t ExampleRequestPath) Validate() (errors []FieldError) {
	// User field validators
	errors = t.User.Validate()
	if errors != nil {
		return
	}
	// Year field validators
	return
}

type ExampleRequestPathUser struct {
	FirstName string
	Role      string
}

func (t ExampleRequestPathUser) Validate() (errors []FieldError) {
	// FirstName field validators
	// Role field validators
	return
}

type ExampleRequestQuery struct {
	From     time.Time
	FromDate time.Time
	Sum      Decimal
	To       time.Time
}

func (t ExampleRequestQuery) Validate() (errors []FieldError) {
	// From field validators
	// FromDate field validators
	// Sum field validators
	// To field validators
	return
}

func MakeExampleRequest(c *gin.Context) (result ExampleRequest, errors []FieldError) {
	result.Path, errors = MakeExampleRequestPath(c)
	if errors != nil {
		return
	}

	result.Query, errors = MakeExampleRequestQuery(c)
	if errors != nil {
		return
	}
	return
}

func MakeExampleRequestPath(c *gin.Context) (result ExampleRequestPath, errors []FieldError) {
	var err error

	yearStr, _ := c.Params.Get("year")
	result.Year, err = strconv.ParseInt(yearStr, 10, 64)
	if err != nil {
		errors = append(errors, NewFieldError(InPath, "year", "can't parse as 64 bit integer", err))
	}
	return
}

func MakeExampleRequestQuery(c *gin.Context) (result ExampleRequestQuery, errors []FieldError) {
	var err error

	fromStr, _ := c.GetQuery("from")
	result.From, err = time.Parse(time.RFC3339, fromStr)
	if err != nil {
		errors = append(errors, NewFieldError(InQuery, "from", "can't parse as RFC3339 time", err))
	}

	fromDateStr, _ := c.GetQuery("fromDate")
	result.FromDate, err = time.Parse("2006-01-02", fromDateStr)
	if err != nil {
		errors = append(errors, NewFieldError(InQuery, "fromDate", "can't parse as RFC3339 date", err))
	}

	sumStr, _ := c.GetQuery("sum")
	result.Sum = Decimal{}
	if err = result.Sum.SetFromString(sumStr); err != nil {
		errors = append(errors, NewFieldError(InQuery, "sum", fmt.Sprintf("can't create from string '%s'", sumStr), err))
	}

	toStr, _ := c.GetQuery("to")
	toSec, err := strconv.ParseInt(toStr, 10, 64)
	if err != nil {
		errors = append(errors, NewFieldError(InQuery, "to", "can't parse as 64 bit integer", err))
	} else {
		result.To = time.Unix(toSec, 0)
	}
	return
}

func (server PaymentGatewayAPIServer) _PaymentGatewayAPI_Example_Handler(c *gin.Context) {
	c.Set(handlerNameKey, "Example")

	req, errors := MakeExampleRequest(c)
	if len(errors) > 0 {
		server.Srv.ProcessMakeRequestErrors(c, errors)
		return
	}

	errors = req.Validate()
	if len(errors) > 0 {
		server.Srv.ProcessValidateErrors(c, errors)
		return
	}

	server.Srv.Example(req, c)
}

// _PaymentGatewayAPI_GetPayment_Handler

type GetPaymentRequest struct {
	Query GetPaymentRequestQuery
}

func (t GetPaymentRequest) Validate() (errors []FieldError) {
	// Query field validators
	errors = t.Query.Validate()
	if errors != nil {
		return
	}
	return
}

type GetPaymentRequestQuery struct {
	Async string
	ID    string
}

func (t GetPaymentRequestQuery) Validate() (errors []FieldError) {
	// Async field validators
	var asyncInEnum bool
	for _, elem := range [...]string{
		"true",
		"false",
	} {
		if elem == t.Async {
			asyncInEnum = true
			break
		}
	}
	if !asyncInEnum {
		errors = append(errors, NewFieldError(UndefinedPlace, "async", "allowed values: [true false]", nil))
	}

	// ID field validators
	return
}

func MakeGetPaymentRequest(c *gin.Context) (result GetPaymentRequest, errors []FieldError) {
	result.Query, errors = MakeGetPaymentRequestQuery(c)
	if errors != nil {
		return
	}
	return
}

func MakeGetPaymentRequestQuery(c *gin.Context) (result GetPaymentRequestQuery, errors []FieldError) {
	result.Async, _ = c.GetQuery("async")

	result.ID, _ = c.GetQuery("id")
	return
}

func (server PaymentGatewayAPIServer) _PaymentGatewayAPI_GetPayment_Handler(c *gin.Context) {
	c.Set(handlerNameKey, "GetPayment")

	req, errors := MakeGetPaymentRequest(c)
	if len(errors) > 0 {
		server.Srv.ProcessMakeRequestErrors(c, errors)
		return
	}

	errors = req.Validate()
	if len(errors) > 0 {
		server.Srv.ProcessValidateErrors(c, errors)
		return
	}

	server.Srv.GetPayment(req, c)
}

// _PaymentGatewayAPI_ProvidePayment_Handler

type ProvidePaymentRequest struct {
	Body ProvidePaymentRequestBody
}

func (t ProvidePaymentRequest) Validate() (errors []FieldError) {
	// Body field validators
	errors = t.Body.Validate()
	if errors != nil {
		return
	}
	return
}

type ProvidePaymentRequestBody struct {
	JSON Payment
	Type ContentType
}

func (t ProvidePaymentRequestBody) Validate() (errors []FieldError) {
	// JSON field validators
	errors = t.JSON.Validate()
	if errors != nil {
		return
	}
	return
}

func MakeProvidePaymentRequest(c *gin.Context) (result ProvidePaymentRequest, errors []FieldError) {
	result.Body, errors = MakeProvidePaymentRequestBody(c)
	if errors != nil {
		return
	}
	return
}

func MakeProvidePaymentRequestBody(c *gin.Context) (result ProvidePaymentRequestBody, errors []FieldError) {
	switch c.Request.Header.Get("Content-Type") {
	case "application/json":
		result.Type = AppJSON
		if err := json.NewDecoder(c.Request.Body).Decode(&result.JSON); err != nil {
			errors = append(errors, NewFieldError(InBody, "requestBody", "can't decode body from JSON", err))
		}

	default:
		errors = append(errors, NewFieldError(InBody, "-", "unknown content type", nil))
	}
	return
}

func (server PaymentGatewayAPIServer) _PaymentGatewayAPI_ProvidePayment_Handler(c *gin.Context) {
	c.Set(handlerNameKey, "ProvidePayment")

	req, errors := MakeProvidePaymentRequest(c)
	if len(errors) > 0 {
		server.Srv.ProcessMakeRequestErrors(c, errors)
		return
	}

	errors = req.Validate()
	if len(errors) > 0 {
		server.Srv.ProcessValidateErrors(c, errors)
		return
	}

	server.Srv.ProvidePayment(req, c)
}

// Router
func RegisterRoutes(r *gin.Engine, api PaymentGatewayAPI) {
	e := &PaymentGatewayAPIServer{api}

	r.Handle("GET", "/v1/example/:year/:user", e._PaymentGatewayAPI_Example_Handler)

	r.Handle("GET", "/v1/payment", e._PaymentGatewayAPI_GetPayment_Handler)
	r.Handle("POST", "/v1/payment", e._PaymentGatewayAPI_ProvidePayment_Handler)
}

type ID string

func (t ID) Validate() (errors []FieldError) {
	return
}

type Payment struct {
	MerchantID string          `json:"merchant_id"`
	Meta       json.RawMessage `json:"meta"`
	PaymentID  ID              `json:"payment_id"`
	Sum        Decimal         `json:"sum"`
	Type       string          `json:"type"`
}

func (t Payment) Validate() (errors []FieldError) {
	// MerchantID field validators
	// Meta field validators
	// PaymentID field validators
	errors = t.PaymentID.Validate()
	if errors != nil {
		return
	}
	// Sum field validators
	// Type field validators
	var typeInEnum bool
	for _, elem := range [...]string{
		"deposit",
		"payment",
	} {
		if elem == t.Type {
			typeInEnum = true
			break
		}
	}
	if !typeInEnum {
		errors = append(errors, NewFieldError(UndefinedPlace, "type", "allowed values: [deposit payment]", nil))
	}

	return
}

type Payments []Payment

func (t Payments) Validate() (errors []FieldError) {
	return
}

// Custom types

type FromStringSetter interface {
	SetFromString(string) error
}

var _ json.Marshaler = (*Decimal)(nil)
var _ json.Unmarshaler = (*Decimal)(nil)
var _ FromStringSetter = (*Decimal)(nil)
