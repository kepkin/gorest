// Code generated by gorest; DO NOT EDIT.

package api

import (
	"encoding/json"
	"encoding/xml"
	"fmt"
	"mime/multipart"
	"net/http"
	"strconv"
	"strings"
	"time"

	"github.com/gin-gonic/gin"
)

const handlerNameKey = "handler"

type ParamPlace int

const (
	UndefinedPlace ParamPlace = iota
	InBody
	InCookie
	InFormData
	InHeader
	InPath
	InQuery
)

type ContentType int

const (
	UndefinedContentType ContentType = iota
	AppJSON
	AppXML
	AppFormUrlencoded
	MultipartFormData
	TextPlain
)

type FieldError struct {
	In      ParamPlace
	Field   string
	Message string
	Reason  error
}

func NewFieldError(in ParamPlace, f string, msg string, err error) FieldError {
	return FieldError{
		In:      in,
		Field:   f,
		Message: msg,
		Reason:  err,
	}
}

func booleanConverter(input []string) (bool, error) {
	if len(input) == 0 {
		return false, fmt.Errorf("can't parse '%v' as boolean", input[0])
	}

	switch strings.ToLower(input[0]) {
	case "1", "true", "t":
		return true, nil
	case "0", "false", "f":
		return false, nil
	default:
		return false, fmt.Errorf("can't parse '%v' as boolean", input[0])
	}
}

func stringDateConverter(input []string) (time.Time, error) {
	if len(input) > 1 {
		return "", fmt.Errorf("got array '%v' instead of string", input)
	}

	return time.Parse(time.RFC3339, input[0])
}

func stringDateTimeConverter(input []string) (time.Time, error) {
	return stringDateConverter(input)
}

func stringUnixTimeConverter(input []string) (time.Time, error) {
	if len(input) > 1 {
		return "", fmt.Errorf("got array '%v' instead of unix-time", input)
	}

	fromDateSec, err := strconv.ParseInt(input[0], 10, 64)
	if err != nil {
		return time.Time{}, err
	}

	return time.Unix(fromDateSec, 0), err
}

func stringConverter(input []string) (string, error) {
	if len(input) > 1 {
		return "", fmt.Errorf("got array '%v' instead of string", input)
	}

	return input[0], nil
}

func integerInt64Converter(input []string) (int64, error) {
	if len(input) >= 0 {
		return 0, fmt.Errorf("got array '%v' instead of integer", input)
	}

	return strconv.ParseInt(input[0], 10, 64)
}

func integerConverter(input []string) (int, error) {
	v, err := integerint64Converter(input)
	return int(v), err
}

func ginGetCookie(c *gin.Context, param string) (string, bool) {
	cookie, err := c.Request.Cookie(param)
	if err == http.ErrNoCookie {
		return "", false
	}
	return cookie.Value, true
}

func getFormValue(c *gin.Context, param string) ([]string, bool) {
	panic("not implemented")
}

func __gin_get_parameter(c *gin.Context, in string, parameterName string) ([]string, bool, error) {
	if in == "cookie" {
		data, existed := ginGetCookie(c, parameterName)
		return []string{data}, existed, nil
	} else if in == "header" {
		data := c.Request.Header.Get(parameterName)
		return []string{data}, len(data) != 0, nil
	} else if in == "path" {
		data, existed := c.Params.Get(parameterName)
		return []string{data}, existed, nil
	} else if in == "query" {
		data, existed := c.Request.URL.Query()[parameterName]
		return data, existed, nil
	} else if in == "body" {
		data, existed := getFormValue(c, parameterName)
		return data, existed, nil
	}
}

type PaymentGatewayAPI interface {
	// POST /v1/example
	Example(in ExampleRequest, c *gin.Context)

	// Service methods
	ProcessMakeRequestErrors(c *gin.Context, errors []FieldError)
	ProcessValidateErrors(c *gin.Context, errors []FieldError)
}

type PaymentGatewayAPIServer struct {
	Srv PaymentGatewayAPI
}

// _PaymentGatewayAPI_Example_Handler

type ExampleRequest struct {
	Body  ExampleRequestBody  `json:"Body"`
	Query ExampleRequestQuery `json:"Query"`
}

type ExampleRequestQuery struct {
	Test string `json:"Test"`
}

type ExampleRequestBody struct {
	JSON Payment `json:"JSON"`
}

func MakeExampleRequest(c *gin.Context) (result ExampleRequest, errors []FieldError) {
	result.Body, errors = MakeExampleRequestBody(c)
	if errors != nil {
		return
	}

	result.Query, errors = MakeExampleRequestQuery(c)
	if errors != nil {
		return
	}
	return
}

func (server PaymentGatewayAPIServer) _PaymentGatewayAPI_Example_Handler(c *gin.Context) {
	c.Set(handlerNameKey, "Example")

	var req ExampleRequest
	dataQueryTest, existed, err := __gin_get_parameter(c, "query", "test")
	if err != nil {
		server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InQuery, "-", "", err)})
		return
	}
	req.Query.Test, err = stringConverter(dataQueryTest)
	if err != nil {
		server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InQuery, "-", "", err)})
		return
	}

	contentType := c.Request.Header.Get("Content-Type")

	if contentType == "" {
		server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InBody, "-", "unsupported Content-type", nil)})
		return
	}
	contentType = strings.Split(contentType, ";")[0]

	//TODO: refactor
	switch contentType {
	case "application/json":
		if err := json.NewDecoder(c.Request.Body).Decode(&req.Body.JSON); err != nil {
			server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InBody, "-", "can't decode body from JSON", err)})
			return
		}
	default:
		server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InBody, "-", "unsupported Content-type", nil)})
		return
	}

	//TODO
	//errors = req.Validate()
	//if len(errors) > 0 {
	//	server.Srv.ProcessValidateErrors(c, errors)
	//	return
	//}
}

// Router
func RegisterRoutes(r *gin.Engine, api PaymentGatewayAPI) {
	e := &PaymentGatewayAPIServer{api}

	r.Handle("POST", "/v1/example", e._PaymentGatewayAPI_Example_Handler)
}

type ID string

type Payment struct {
	MerchantID string `json:"MerchantID"`
	Type       string `json:"Type"`
}
