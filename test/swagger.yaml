openapi: 3.0.0
info:
  title: Test Api
  version: v1

servers:
  - url: https://superhost.ru/
    description: Production

  - url: http://localhost:8081/
    description: Develop

paths:
  '/v1/books':
    post:
      summary: Adds Resource
      tags: [srv]
      description: Adds new policies and updates old ones if they exists
      operationId: CreatePoliciesInBatch
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string

        - in: header
          name: X-access-token

          required: true
          schema:
            type: string

      requestBody:
        description: "Create policy request"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"

      responses:
        '200':
          description: A successful response.
        '400':
          description: Error on invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBookResp'

  '/v1/books/{id}/tags':
    get:
      summary: Gets books tags
      tags: [srv]
      operationId: ListPolicies
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string

      responses:
        '200':
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tags'


  '/v1/books_search':
    get:
      summary: Gets books
      tags: [srv]
      operationId: BooksSearch
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string

        - in: header
          name: X-access-token
          required: true
          schema:
            type: string

        - name: filter_author
          in: query
          description: "You can specify several policy type separated by comma."
          required: false
          schema:
            type: string
            example: "Dostoevsky,Tolstoy"

      responses:
        '200':
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBooks'

components:
  schemas:
    Book:
      type: object
      properties:
        title:
          type: string
        authors:
          type: array
          items:
            $ref: '#/components/schemas/Author'

    Author:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
