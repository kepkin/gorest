// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package pkg

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 10, 14, 11, 49, 53, 847697488, time.UTC),
		},
		"/handlers.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "handlers.tmpl",
			modTime:          time.Date(2019, 10, 14, 11, 49, 53, 846972724, time.UTC),
			uncompressedSize: 4597,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\xd1\x73\xd3\xb8\x13\x7e\x6e\xfe\x8a\xc5\x13\xf8\xd9\xbf\x49\x05\x37\xc3\xf0\x50\x26\x37\x03\x6d\x29\xb9\x83\xb6\xd7\x84\xbb\x07\x86\x69\x85\xbd\x6e\x74\xe7\xc8\xae\x24\x17\x18\xe3\xff\xfd\x66\x25\x27\xb6\x63\x3b\xb4\x07\x0f\x77\x7a\x8a\xe4\xdd\xd5\xa7\x4f\x9f\x56\xab\x14\x05\x8c\x33\x85\xb1\xf8\x0c\x07\x53\xf0\xdf\xf2\xbf\x70\x16\xa1\x34\x22\x16\xa8\x80\xcd\x64\x9c\xb2\x85\x30\x09\x06\x50\x96\xa3\xd1\xa8\x28\xf6\x21\xc2\x58\x48\x04\x6f\xc9\x65\x94\xa0\x3a\xc2\x30\xf1\xe8\x6b\x9c\xcb\x10\x7c\x8d\xea\x16\x15\x14\x05\x73\x71\xcb\x72\x6e\x47\x02\xb8\x6c\x8c\xd9\xdf\xdc\x2c\xd9\x59\x86\x8a\x1b\x91\xca\xd9\x51\x59\x5e\xbe\x76\x21\xfd\x10\xfe\x7f\x2d\x24\x3b\x4c\xa5\xc1\xcf\x26\x80\x62\x04\x00\x20\xe4\x04\x50\x29\x42\x4a\x40\x7b\x43\x5c\xe0\x8d\x1f\x06\xce\x3c\x86\x04\xa5\x8f\x4a\x05\xf0\x33\x3c\xa9\x82\xac\xdb\x2d\x57\x14\xec\xad\xbe\x06\x6d\x94\x90\xd7\x9a\xbd\xcc\x45\x12\xa1\x6a\x99\xc5\xa9\x02\x41\x33\x2a\x2e\xaf\xd1\x4e\xdf\x8e\x63\x8d\x56\x86\xbd\xca\x94\x90\x26\x91\xfe\x23\x17\xd5\x42\x7d\x2f\x3e\xb0\x63\xa5\x52\xe5\x07\x41\xcb\xab\xb4\xbd\xbd\xbd\x90\xfd\x32\x3f\x3b\xf5\x97\xc6\x64\x6c\x6e\xb8\xc9\xf5\x4b\x1e\x5d\xe0\x4d\x8e\xda\x4c\x08\x58\x1e\x9a\x6a\xc2\xbd\xbd\x3d\x1b\xaa\x82\x0b\x57\x7f\xea\x54\x1e\x78\x48\x63\xde\x55\x65\x52\x16\x6e\x76\x36\xb7\x46\x7e\x50\x06\xd5\x17\x85\x26\x57\xd2\x75\xdc\xec\x6e\xa7\xd8\x5c\xdd\xb2\x5e\x2a\x7d\xe2\x3b\x0c\x46\xa5\xdd\x75\x94\x51\x47\x01\x0a\x6f\xe6\x16\xe2\x46\x03\x14\x97\x2c\xc6\x0e\xfa\x29\x5f\xa1\x15\x96\x25\x07\x9a\xf1\xc1\xbb\xc0\x1b\x2f\x80\x7d\x8a\x4a\x6e\xe6\x4b\x86\x40\x7a\x6c\xb8\x96\x65\x9b\x83\x75\x78\xb7\x19\xe3\x8c\x2b\xbe\x42\x83\x56\x12\xec\x7c\xdd\xd3\x15\x90\xa6\x47\x6d\xbb\xc1\xb4\x25\xf6\xda\x82\x91\x49\x00\x9d\x28\xdb\x41\xca\xb2\x3d\xc8\xe6\xe1\x12\x57\x9c\x9d\xa4\x0b\x5a\x4b\xc3\xbf\x41\x60\x73\xe8\x93\x30\x4b\x60\xd5\x76\xbf\x4c\xa3\x2f\xdd\x39\x37\x6b\x0d\xe9\x2c\x48\x43\x91\x27\x30\xfe\x48\xc6\xb4\xe8\x43\x37\xbc\xed\x48\xcd\x06\x24\x80\x64\x3c\x8c\xad\x8d\xaf\x7f\x64\x23\x81\x6e\x16\x08\x53\xe9\xb6\x28\x55\xdf\xa1\x82\x35\x33\x1b\x56\x16\xe9\x61\x1d\xd8\x42\x66\x56\x2a\x9b\x23\x47\xc9\xc6\x65\x81\x2d\xc5\x74\x92\x87\xaf\x50\x43\x51\x34\xac\xca\xd2\x9e\xce\x54\xbd\x11\xda\xc0\xfb\x0f\xf6\x77\xd0\x9f\x20\x9c\x61\xeb\xcb\x25\x4c\x69\x74\xd4\xa1\xd0\xed\xe7\x4c\x9e\x73\xb3\x6c\xa1\x5d\xb7\xc7\x8f\xe1\xdd\xc5\x0c\x3e\x0a\x19\x09\x79\xdd\xcd\x23\xa9\x82\xcb\x09\x58\x41\xd5\x39\x27\x74\xca\xd6\x3d\x89\x87\x9a\xfe\x24\x4c\xb8\x74\x4e\xec\x57\xfc\x32\x60\xd6\x90\x92\x9c\xc0\xd8\x6e\xc8\x1a\x6a\x0f\x52\x6a\x21\xd7\x08\x1e\x11\x2c\xa1\x2c\xbd\x83\x5e\x23\x6a\x0a\x35\x2b\x0a\xd8\x3e\x50\xe4\x05\xd3\x0a\xd9\xef\x3c\xc9\x71\x34\x08\x6d\xeb\x74\x34\x5b\x84\x31\xcf\x13\x33\x3c\x7d\xbd\x95\x53\xe0\x59\x86\x32\xf2\x37\x43\x13\x9b\x9c\x6d\xe2\x8c\x7d\xef\x9d\xc4\xcf\x19\x86\x06\x23\xc8\x95\x80\xcd\xc9\x3d\x80\xab\x87\xfa\xca\x9b\xd4\x2c\x6e\xe5\xeb\x75\xeb\x12\xd5\x7b\x90\xea\xac\xd6\xfc\xd0\x43\xff\x6f\x39\xaa\xce\xa9\x5f\xdb\x8b\x18\xf0\x06\xc6\xc8\xac\xfe\x3d\x21\x0d\x5e\xa3\xf2\x86\xb6\xab\xe5\xf2\x2a\x55\x2b\x6e\xac\xd3\xb3\xa7\x83\x2e\xb0\x7b\xf3\xdc\x75\x3b\xa5\x1c\x1c\xa6\xf2\x96\x74\xa8\x71\x26\x8d\x1f\x32\x0b\xdc\xaf\xc5\x11\x4c\xe0\xa7\x27\x13\x78\xf6\xb4\x9f\x37\x70\xf7\x31\x85\x7b\x30\x05\x29\x92\x01\x95\xae\xdb\xee\x2d\xb5\x3f\x35\xfb\x43\xf1\x8c\x86\x27\xe0\x1d\xdb\x6d\xa5\x6b\xd1\x2e\x18\x84\x84\x1a\xda\x30\xa4\x61\x22\x31\xd1\xf8\x63\x48\x7b\x61\x52\xd1\x47\xd8\xbf\x80\x28\x92\xd3\x0f\xa0\xaa\x75\x71\xdc\x91\xc4\xdd\x29\xa3\x87\xae\xfe\x09\x3a\x53\x0f\xe4\x92\x81\xe3\xf7\x1a\x79\x84\xaa\xef\x74\x7c\x0b\x5f\x75\x69\x33\x17\x81\x9d\xa0\x19\x04\xbb\x03\x92\x88\x81\xd1\x35\x4d\xd1\x84\xc2\xa8\x0f\x89\x88\xeb\xe9\x60\xea\x34\xf1\xf5\x6b\x03\x82\xbd\xe7\xa7\xbb\xc4\x72\xf7\x04\x69\x63\x09\x0d\xfc\xa3\x46\x69\xfa\xf4\x70\x67\xba\x45\x0c\x32\x35\x6e\x7d\xff\x7c\x5d\x0f\xa6\x60\x8b\xe3\xd3\xd4\x95\x33\xdf\xb9\xbe\xc6\x05\x40\x55\xd1\x77\x2d\xb0\xb7\x30\x73\xca\x1a\x5a\x73\x75\x57\x87\x86\xac\xfa\x45\x54\x15\x74\xfb\x14\xcf\x0b\x9e\x43\xab\xf6\x5d\x37\x77\x33\xf3\x2c\x4b\x44\x68\x2b\xa9\xc7\xf4\x18\x18\xb8\xa1\x23\x0c\x69\x3a\xb2\x60\xa7\xf8\xe9\x08\xc3\x34\xa2\x37\x56\x8b\xe8\xfe\x83\x5f\x65\xa2\x83\x29\x05\x61\xce\xd3\x7f\x44\x67\xc3\xfa\x3c\xbf\x5b\x9e\xba\x6f\x8e\x3a\xe4\xf2\x7f\x06\xec\x65\x03\xf4\x3c\x1a\x4a\x4b\x5d\x7e\x77\x96\x0a\xf7\x51\x89\xce\xb3\x2c\x55\x24\x93\x6a\x7b\xf7\xe9\x79\x72\x00\x0f\x6f\xbd\x09\x84\xe6\x1e\xb2\x69\x8e\x36\xde\x60\xb5\x4b\x6d\xba\xfd\xcc\xaa\x04\x96\xab\x64\x23\x2c\x2a\xd7\x74\xb3\x58\xae\x6c\x56\x68\x96\x69\x34\x81\x71\x66\x0b\xed\x48\x84\x06\xbc\xf3\xb3\xf9\xc2\xa3\x62\xe0\x3c\xd5\x06\xbc\x93\x63\xd7\x3b\x41\x03\xde\xd1\xf1\x9b\xe3\xc5\xb1\xed\x1f\x61\x82\x06\xc1\x3b\x7f\x57\x59\xe7\xe4\xfb\x62\x71\xf8\xda\x75\x39\x49\xd6\x3b\x3b\x5f\xcc\xce\x4e\xe7\x76\xe8\x2c\x23\xcd\xe9\x60\xfb\x89\x63\xeb\xdf\x71\x06\x76\x2d\x06\x57\x59\xc2\xcd\xf6\x1f\x05\x6b\x70\xee\x9f\x00\x6f\xf3\xf7\x83\x47\x0f\x50\xea\x42\x27\x6c\x4d\x64\x83\xa1\x7b\x90\xf5\x5f\xe2\x6a\xeb\x49\xed\x0c\x5a\x16\x9d\x07\x57\x65\xf3\x2d\xc6\xea\x5f\x7f\x07\x00\x00\xff\xff\xc6\xc5\x5e\x03\xf5\x11\x00\x00"),
		},
		"/interface.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "interface.tmpl",
			modTime:          time.Date(2019, 10, 11, 10, 33, 27, 532361658, time.UTC),
			uncompressedSize: 586,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xcd\x6e\xab\x30\x10\x85\xf7\x3c\xc5\x91\xc5\x22\xb9\x4a\xc8\xfe\x4a\x77\x71\x95\xa0\x14\xa9\x29\xa8\xd0\x07\xb0\x60\x08\x56\x89\xa1\x66\x92\xb6\xb2\xfc\xee\x15\x3f\x49\xab\x26\x52\xbb\xf3\x8c\xe7\xe7\x3b\x67\x3c\x6b\x97\x28\xa8\x54\x9a\x20\x94\x66\x32\xa5\xcc\x69\x47\x5c\x35\x85\xc0\xd2\x39\x0f\x00\xac\x0d\xe2\x96\x8c\x64\xd5\xe8\x68\xe3\xdc\x4c\xe9\xab\xdc\x23\xbd\x2c\x90\xe3\xcf\x5e\xe9\x60\xdd\x68\xa6\x37\x9e\x0f\xd3\x49\x17\xce\x79\x1e\xbf\xb7\x04\x6b\xb1\x93\xcf\x14\x15\xa4\x59\x95\x8a\x0c\x82\x48\x97\x4d\x90\x29\xae\x09\xce\xe1\x82\x00\x3b\x6d\x5e\xc2\x48\xbd\x27\xf8\x47\x53\x2f\xe0\x13\xfe\xfe\x43\x90\x48\xae\xba\x09\xee\x5b\xd9\x61\x60\x5f\xc0\x6f\xfb\xca\x59\xa1\x72\x86\x48\xe2\x34\x13\xf0\x29\x48\x9a\x8e\x21\xb6\xe1\x18\x6d\x89\x21\x36\xe1\x7d\x98\x85\x43\xbc\xa1\x9a\x98\x20\x92\xa7\xa9\xfa\xd8\xf7\xfe\xcf\xd6\x77\x63\x28\x39\xaf\x20\xe2\x24\x8b\xe2\x87\x74\x48\xc5\x6d\xaf\xbf\x9b\xe3\x0b\xcc\x19\xe8\x55\x71\xd5\x63\x4c\x5f\xab\x55\x2f\xbf\x35\x4a\xf3\x99\x12\x02\x62\x10\x86\x8b\xd1\x4c\x87\xb6\x96\x7c\xeb\x1a\xe3\xa8\xab\x35\xa3\xbf\xb7\x32\x9f\xef\xdf\xfa\x9f\x92\x39\x91\x41\xc7\xe6\x98\xf3\x74\x82\xd4\x9c\xf0\x63\xa3\xe7\x3e\x02\x00\x00\xff\xff\x86\x24\xe5\x8a\x4a\x02\x00\x00"),
		},
		"/main.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "main.tmpl",
			modTime:          time.Date(2019, 10, 14, 11, 11, 6, 693654472, time.UTC),
			uncompressedSize: 440,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\x31\x6e\xf3\x30\x0c\x85\xe7\xe8\x14\x84\xa6\x64\x88\x74\x80\x7f\x74\xfe\xa1\x4b\x33\xc4\x17\x50\x64\x46\x56\x63\x91\x82\x44\x17\x08\x8c\xdc\xbd\x10\xe0\xb6\x69\x03\x74\xe2\x87\xf7\x3e\x02\xcf\x5a\xe8\x78\x40\x08\x48\x58\x9c\xe0\x00\xe7\x1b\x04\x2e\x58\xe5\x1f\x1c\x8e\xf0\x7a\xec\xe1\xff\xe1\xa5\x37\x4a\x65\xe7\xaf\x2e\x20\x2c\x8b\x59\xf1\x7e\x57\x2a\xa6\xcc\x45\x60\xab\x36\x1a\xc9\xf3\x10\x29\xd8\xb7\xca\xa4\xd5\x46\x5f\x92\xb4\x13\xa2\x8c\xf3\xd9\x78\x4e\x36\x44\xda\x07\xa6\xe8\x1b\xfd\xea\xf2\x35\x58\x2c\x85\x4b\x6d\x05\xa1\xd8\x51\x24\x37\xae\x52\x3c\xd3\xfb\x8a\x91\x42\xd5\x6a\xa7\xd4\xb2\x08\xa6\x3c\x39\x41\xd0\x91\x04\xcb\xc5\x79\x34\x92\xf2\xa4\xc1\xd4\x8c\x1e\xf6\x6d\xe1\xa3\x36\x3a\x1a\x26\x2c\xf5\x6f\x4b\x6e\x19\x3f\x95\xed\x10\xbd\x80\xf6\x9c\x32\x13\x92\xd4\xf5\xcb\x74\x5f\x89\x39\xf9\x11\x93\xab\xa0\x5b\x11\xdd\xd4\xb7\x7f\x0d\x26\xa1\x38\x73\x7a\xc8\x40\xfb\xb9\x0a\xa7\x1f\x42\xf7\x1d\xed\x9e\xb7\x14\x9e\x05\xcb\xd3\xde\x8f\x00\x00\x00\xff\xff\x0c\x52\x9e\xc9\xb8\x01\x00\x00"),
		},
		"/router.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "router.tmpl",
			modTime:          time.Date(2019, 10, 11, 15, 44, 54, 433086287, time.UTC),
			uncompressedSize: 490,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x41\x6b\xe3\x30\x10\x85\xcf\xd1\xaf\x78\x08\xb3\x24\x8b\x57\xb9\x2f\xf4\x50\x12\x93\x18\xda\xda\x24\xce\xb9\x88\x78\x6c\x8b\xba\xb2\x91\xe5\xb4\x60\xf4\xdf\x8b\xe4\xd0\x26\x50\xdd\xde\x9b\x19\x7d\xf3\x66\x9a\x10\xf5\x86\x2a\xf5\x89\xff\x0f\x58\x3e\xcb\x37\x4a\x4b\xd2\x56\x55\x8a\x0c\x44\xaa\xab\x4e\x14\xca\xb6\xb4\x82\x73\x8c\xad\xd7\x38\x74\xa3\x25\xc3\x58\x35\xea\x33\x0e\x54\xab\xc1\x92\x09\xe6\xb0\x34\xf8\x5b\x2b\x2d\x12\x5d\x2b\x4d\x31\x64\xaf\x70\x03\x70\x6e\x85\x89\x01\xe4\x51\x7f\xee\x0a\x47\x32\x17\x32\x93\xec\x95\x63\x6c\x31\x4d\xff\x60\xa4\xae\x09\xd1\x68\xda\x18\x51\x98\x10\xb9\xb4\xcd\xe0\x1c\x5b\x00\xc0\x4d\xcf\x3b\xd9\xa6\x2b\x63\x44\x7d\xc8\x50\xaa\xb3\x05\xcf\xb3\x63\xc1\x11\x91\xc8\xbb\xc1\x82\xef\x92\x59\xed\xc8\x82\x6f\x93\xa7\xa4\x48\x82\xde\x52\x4b\x96\xc0\xf3\xd3\xb5\x7b\xf4\xb3\x8f\xc5\x66\x3f\x4b\x69\xcf\x0d\x78\x96\x17\x69\xf6\x72\x0c\x56\xd6\x5b\xd5\xe9\x21\xdc\xe3\x7b\x93\x0f\x65\x1b\xcf\x77\x8e\x01\x46\xec\xa5\x2e\x5b\x5a\x72\x9f\x71\xde\x0e\xce\xf1\x18\xde\xd8\x74\xfa\x42\xc6\x9e\x4c\x1b\xd2\xcd\x05\x12\xaf\x77\xf7\x98\x95\xc8\x7a\x32\xd2\xe3\xd2\xad\x37\xe7\x6f\xcd\x8a\xe1\xfa\x3c\x9a\x74\x19\xa8\xbf\x39\x3f\xca\xb1\xaf\x00\x00\x00\xff\xff\x14\xe1\x0f\x3a\xea\x01\x00\x00"),
		},
		"/types.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "types.tmpl",
			modTime:          time.Date(2019, 10, 14, 11, 47, 48, 365155371, time.UTC),
			uncompressedSize: 1138,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\x4b\x8f\x9b\x30\x10\xc7\xef\x7c\x8a\x11\xca\x01\xaa\x84\xdc\x23\x71\xea\xa1\xea\x21\x55\xd5\xc7\xb9\xb8\x30\x24\x4e\xf1\xa3\xb6\x93\xd5\xca\xf2\x77\x5f\x19\x30\x31\x2c\xfb\x90\x96\x93\x1f\x33\xbf\xf9\x33\xf3\xb7\xb5\x3b\x68\xb0\xa5\x1c\x21\xad\x05\x93\x82\x23\x37\x3f\xeb\x33\x32\x92\x82\x73\x09\x00\x80\x8f\xa1\x2d\xe0\x7f\x28\x74\x7f\x53\xfc\x7a\x94\x08\xa9\xf8\x7b\xc1\xda\x4c\x61\x51\x68\x88\xfb\xae\x84\x44\x65\x28\xea\x38\xc8\x7f\xc6\x13\xac\x1d\x03\xbf\x11\x86\xce\x81\x36\xea\x5a\x1b\xb0\xb3\xc8\x01\xaa\x08\x3f\x21\x6c\xa4\x12\x92\x13\x86\xdb\x61\x09\x87\xf2\x1d\xb5\x02\x63\x23\x89\x22\x0c\x0d\x2a\x5f\xcf\xe7\x66\x47\xf2\x0f\xbf\x36\xc8\x0d\x6d\x29\xaa\x3b\x3f\x7f\x9b\xd1\xf7\xe0\x50\x0e\x39\xc5\x17\xd1\xef\x57\xb3\x96\x85\x9d\x9b\x1f\x8e\x99\x50\x5d\xb4\xe0\x87\xb4\xbf\x1b\x75\x80\x73\x69\xb5\xd2\x0e\xe4\xcd\xa2\xd4\x7c\x06\xd8\xe9\x67\x62\x56\x5b\x5e\x82\x2f\x5a\xfc\x20\x0f\x47\xd4\x9a\x9c\x30\x59\x94\x89\x4d\xb0\xa4\xae\x12\xad\x9d\x46\x32\x6f\x4a\x04\x8c\x96\xc9\x7e\x0f\x9f\x83\xf1\x74\x92\x58\x1b\x66\x7d\xa7\x6e\xc3\xa6\x9f\xf7\x64\x53\x1d\x93\x0d\x32\xd9\x11\xb3\x66\xe3\xac\xa1\xb5\x81\xf4\xce\x4b\x63\x78\xb8\x98\x0e\x21\x1f\x24\xc6\x0a\xfd\x7f\x68\x68\x50\xd1\x1b\x36\xd0\x2a\xc1\xa0\x1a\xec\x5f\x81\x9c\x8c\x17\x89\x9f\x4b\xd6\x12\x6b\x4a\xba\x81\xf2\x51\xd1\xa1\xad\xaf\xea\xde\xbd\x2c\xfc\xaa\x51\x8d\x6f\xbe\x81\xaa\x15\x8a\x11\x53\xcd\xa5\xfb\xc1\x86\x37\x52\xd4\x57\x6d\x04\x9b\x69\xbf\x11\x05\x7f\x06\xe7\xfc\xe6\x8c\x28\x7d\x26\x1d\x2a\x28\x21\xfb\xe4\xdd\x3b\xa5\x3b\x97\x67\x9c\x76\x79\xac\xea\x29\x00\x00\xff\xff\xaa\x6e\x93\xf7\x72\x04\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/handlers.tmpl"].(os.FileInfo),
		fs["/interface.tmpl"].(os.FileInfo),
		fs["/main.tmpl"].(os.FileInfo),
		fs["/router.tmpl"].(os.FileInfo),
		fs["/types.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
