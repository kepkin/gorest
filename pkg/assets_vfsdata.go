// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package pkg

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 8, 27, 7, 36, 45, 606855583, time.UTC),
		},
		"/handlers.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "handlers.tmpl",
			modTime:          time.Date(2019, 8, 27, 7, 36, 45, 606223978, time.UTC),
			uncompressedSize: 3404,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x51\x6f\xdb\x36\x10\x7e\xb6\x7f\xc5\x4d\x70\x0b\x69\x70\x98\x0e\x28\xfa\xe0\xc2\x03\x5a\x3b\x6d\xbd\x75\xb1\x17\xbb\x7b\x4d\x19\xe9\x64\x73\x93\x29\x85\xa4\x9c\x04\xaa\xfe\xfb\x70\xa4\x2c\x4b\xb6\x92\x2c\x8f\x0b\x10\xc0\xa4\x3e\x1e\xbf\xbb\xef\xe3\x91\x45\x01\x83\x4c\x61\x2c\xee\x61\x34\x06\xff\x0f\xfe\x0f\xce\x22\x94\x46\xc4\x02\x15\xb0\x99\x8c\x53\xb6\x12\x26\xc1\x00\xca\xb2\xdf\xef\x17\xc5\x19\x44\x18\x0b\x89\xe0\x6d\xb8\x8c\x12\x54\x53\x0c\x13\x8f\xbe\xc6\xb9\x0c\xc1\xd7\xa8\x76\xa8\xa0\x28\x98\x8b\x5b\x96\x4b\x3b\x13\xc0\x75\x63\xce\xfe\xe6\x66\xc3\xe6\x19\x2a\x6e\x44\x2a\x67\xd3\xb2\xbc\xfe\xe2\x42\xfa\x21\xfc\xbc\x16\x92\x4d\x52\x69\xf0\xde\x04\x50\xf4\x01\x00\x84\x1c\xc2\x35\xf1\x24\x9a\x9d\x01\xae\xf0\xd6\x0f\x03\x0b\x76\x3c\xd8\x52\xed\x58\x27\xd4\xa7\x68\x61\xd0\x2f\x6d\x4e\x28\x23\x9b\x5f\x2b\x41\x85\xb7\x4b\xa3\xf2\xd0\xd4\x29\x52\x60\x42\x0c\xb4\x9d\xbf\xe4\x5b\xb4\x75\xcb\x94\x90\x06\x9a\x1b\x80\x77\x85\xb7\x5e\x00\x67\x65\xd9\x37\x0f\x19\x02\x55\xba\xb1\xaa\x2c\xc1\x8d\xaa\xdc\x28\xaa\xe2\x72\x8d\x30\xc8\xb8\xe2\x5b\x34\xa8\x28\x34\x5b\xec\x47\xba\xb9\x7f\x8d\xa9\x29\x1c\x49\x77\x40\x30\x82\x04\xd0\xb9\x7a\x45\xcc\x68\xf5\x24\x95\x3b\x54\xc6\x8e\x1b\x4b\x97\xe1\x06\xb7\xbc\xb1\xf8\x78\xe7\xb2\x6c\x4f\xda\x00\x8d\xad\xaa\xba\xee\x87\x77\xc2\x6c\x80\x5d\xe1\x6d\x8e\xda\x7c\x4c\xa3\x87\x3d\xf6\xa8\x04\x21\x09\x2f\x2d\x9d\x21\x0c\x6e\x08\x48\xb5\x98\xb8\xe9\xfd\x22\x1b\xa0\x28\xa0\x45\x9e\xc0\x15\xef\xe3\xe0\x8e\x4c\x7b\x54\xcb\x6f\xfd\xdd\x54\x3f\x4c\xa5\x53\x28\x55\x2d\xfd\x5f\xea\x80\x7d\xfe\x8d\x0a\xac\xd2\xc9\x21\xb8\xa5\xcd\xac\x51\xdc\x11\x72\xee\x3e\x72\xcb\xc9\x91\xf0\x15\x6a\x28\x8a\x06\xaa\x2c\x87\x80\x4a\xd1\x7f\xaa\xf6\x67\x66\xc7\xab\x09\x4d\x7e\x13\x72\xad\xd9\xc7\x5c\x24\x11\x2a\xc7\xea\xfc\x1c\xbe\x5d\xcd\xe0\x46\xc8\x48\xc8\xb5\x9d\x8a\x53\x05\xd7\x43\xb0\x9a\x52\x6e\x4e\x93\xd0\x39\x51\x57\x71\xed\x11\xbb\x13\x26\xdc\x38\x20\xfb\x1d\x1f\x1a\x9f\x1a\x5a\xca\x21\x0c\x6c\x8d\xd8\x4c\x2e\xb8\xd9\x34\x55\x09\xb9\x46\xf0\x28\x59\x09\x65\xe9\x8d\xea\x0f\xf4\xa7\x50\xb3\xa2\x80\x63\x63\x13\x12\xc6\xd5\xae\x7f\xf1\x24\xc7\x7e\xbf\xd7\x3b\x32\x1b\xfd\x45\x18\xf3\x3c\x31\xed\xa0\xf1\xd6\xb0\x4f\x56\xac\xd8\x7f\xed\x0a\x33\x04\xef\x9b\xc4\xfb\x0c\x43\x83\x11\xe4\x4a\x40\x6d\xe7\x11\x7c\x7f\xa5\xbf\x7b\xc3\x43\x8e\x41\x1d\xcd\x65\xd1\x30\x77\x47\xbe\x7f\xe6\xa8\x4e\x3c\x2e\x62\xc0\x5b\x18\x20\xb3\xca\x7b\x42\x1a\x5c\xa3\xf2\x9a\xb0\x13\xe8\xa7\x54\x6d\xb9\xb1\xe0\x77\x6f\x6b\xe8\x13\x15\x72\x56\x18\x93\xe8\x61\x2a\x77\x24\x9e\xc6\x99\x34\x7e\xc8\x2c\x29\xff\x50\xf5\x60\x08\xbf\xbc\x19\xc2\xbb\xb7\x2e\x37\xda\x53\x29\xf8\x69\x0c\x52\x24\x0d\x49\x15\x9a\x5c\xc9\xfe\x21\xf5\xd6\xd1\x4a\x34\xbe\x9c\xd4\x07\x93\x8a\x2e\x42\x4f\x13\x79\x9e\x4c\x7d\xce\x5f\x46\x0f\xc6\xd0\x41\xa6\xa3\x85\x1c\xbb\xed\x11\xf5\xbf\x20\x8f\x50\xfd\x07\xb1\xec\xc6\x55\x57\x64\x6e\x15\xfb\x8c\xa6\xc5\xa2\xb9\x67\xaf\xf2\x06\xa3\x0e\x48\xeb\x84\xc2\xa8\x6e\x34\x22\x3e\x44\x83\xb1\xab\xde\x8f\x1f\x8d\x1d\x6c\xdf\x1c\x1f\x97\xb5\xfb\x64\x58\xac\xd0\xc0\x6f\x34\x4a\x53\x55\xe3\xd1\xfe\x2e\x62\x90\xa9\x71\xbc\x5e\xc8\xe7\x44\xe6\x67\x4f\x2a\x75\xfa\xe7\x08\x75\xde\x27\x4e\x9f\x16\xc7\xaa\x95\x85\x86\x3e\x75\x6b\x51\x5d\x3e\x67\x14\xc4\x0b\xde\x43\x7d\x75\xbb\x26\xc6\xb3\x2c\x11\xa1\xed\xfd\xe7\x7f\xeb\x54\x36\x9a\x59\x84\x21\x85\xa5\x59\x76\x89\x77\x53\x0c\xd3\x88\x1e\x39\xad\x02\xb8\x44\x7a\x95\xe9\x47\x63\x5a\xc5\x1c\xd4\x7f\x4d\xde\xb1\xa0\xf7\xa7\x47\xa2\xd7\xeb\xae\xd4\x84\x4b\x43\x7d\x4b\x23\xfc\xb6\x9c\x5f\x7a\x01\x9c\x9f\xaf\xe6\xd3\xf9\x08\x84\xdc\xa1\x36\x62\xcd\x0d\xda\x66\xbf\x4d\x15\x42\x84\x86\x8b\x04\x23\x77\x5b\xb8\xc8\xae\xac\x27\x7d\xf4\x31\x65\x74\x9e\x65\xa9\x22\x69\xaa\x7a\x9f\xd1\xcb\x67\x04\xaf\x76\xde\x10\x42\xf3\x84\x54\x2e\xeb\x54\x69\xf6\x15\xa5\x1f\xc0\xaf\xf0\xa6\xe1\x04\xd7\x34\x68\xd7\x0b\x02\xc5\x7e\x85\x5d\xda\x0b\xcd\x0f\x9a\x81\xab\xc6\xd0\x71\xc1\xd7\xef\xd7\xca\x13\xb9\x4a\x6a\x2f\xd0\xbd\xa4\x3b\x7c\xb3\x45\xb3\x49\xa3\x21\x0c\x32\x7b\xc9\x47\x22\x34\xe0\x2d\xe6\xcb\x95\x47\x4d\x79\x91\x6a\x03\xde\xe7\x0b\x37\xfa\x8c\x06\xbc\xe9\xc5\xd7\x8b\xd5\x85\x1d\x4f\x31\x41\x83\xe0\x2d\xbe\x55\xe8\x9c\xd6\x7e\x58\x4d\xbe\xb8\x21\x27\xc3\x79\xf3\xc5\x6a\x36\xbf\x5c\xda\xa9\x79\x46\xee\xd1\xc1\xf1\x85\x61\xdf\x0c\x83\x8c\xa6\x8b\xc2\xe0\x36\x4b\x48\xb9\xf6\xfb\x7b\x4f\xce\x3d\xb0\xbd\xfa\x55\xef\xd1\xcb\x97\x86\x70\x12\xb6\xeb\x39\xf4\x92\x62\xfd\x9f\x6a\x75\xf4\x94\x77\x80\x16\xe2\xe4\xb9\x57\x61\x9e\xab\xd8\xe1\xd7\xbf\x01\x00\x00\xff\xff\x2c\x71\x32\x32\x4c\x0d\x00\x00"),
		},
		"/interface.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "interface.tmpl",
			modTime:          time.Date(2019, 8, 26, 16, 44, 26, 113606321, time.UTC),
			uncompressedSize: 586,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xcd\x6e\xab\x30\x10\x85\xf7\x3c\xc5\x91\xc5\x22\xb9\x4a\xc8\xfe\x4a\x77\x71\x95\xa0\x14\xa9\x29\xa8\xd0\x07\xb0\x60\x08\x56\x89\xa1\x66\x92\xb6\xb2\xfc\xee\x15\x3f\x49\xab\x26\x52\xbb\xf3\x8c\xe7\xe7\x3b\x67\x3c\x6b\x97\x28\xa8\x54\x9a\x20\x94\x66\x32\xa5\xcc\x69\x47\x5c\x35\x85\xc0\xd2\x39\x0f\x00\xac\x0d\xe2\x96\x8c\x64\xd5\xe8\x68\xe3\xdc\x4c\xe9\xab\xdc\x23\xbd\x2c\x90\xe3\xcf\x5e\xe9\x60\xdd\x68\xa6\x37\x9e\x0f\xd3\x49\x17\xce\x79\x1e\xbf\xb7\x04\x6b\xb1\x93\xcf\x14\x15\xa4\x59\x95\x8a\x0c\x82\x48\x97\x4d\x90\x29\xae\x09\xce\xe1\x82\x00\x3b\x6d\x5e\xc2\x48\xbd\x27\xf8\x47\x53\x2f\xe0\x13\xfe\xfe\x43\x90\x48\xae\xba\x09\xee\x5b\xd9\x61\x60\x5f\xc0\x6f\xfb\xca\x59\xa1\x72\x86\x48\xe2\x34\x13\xf0\x29\x48\x9a\x8e\x21\xb6\xe1\x18\x6d\x89\x21\x36\xe1\x7d\x98\x85\x43\xbc\xa1\x9a\x98\x20\x92\xa7\xa9\xfa\xd8\xf7\xfe\xcf\xd6\x77\x63\x28\x39\xaf\x20\xe2\x24\x8b\xe2\x87\x74\x48\xc5\x6d\xaf\xbf\x9b\xe3\x0b\xcc\x19\xe8\x55\x71\xd5\x63\x4c\x5f\xab\x55\x2f\xbf\x35\x4a\xf3\x99\x12\x02\x62\x10\x86\x8b\xd1\x4c\x87\xb6\x96\x7c\xeb\x1a\xe3\xa8\xab\x35\xa3\xbf\xb7\x32\x9f\xef\xdf\xfa\x9f\x92\x39\x91\x41\xc7\xe6\x98\xf3\x74\x82\xd4\x9c\xf0\x63\xa3\xe7\x3e\x02\x00\x00\xff\xff\x86\x24\xe5\x8a\x4a\x02\x00\x00"),
		},
		"/main.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "main.tmpl",
			modTime:          time.Date(2019, 8, 27, 6, 15, 43, 456090745, time.UTC),
			uncompressedSize: 297,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xcd\x31\x4e\x43\x31\x0c\xc6\xf1\xb9\x3e\x85\x95\x09\x86\xe6\x1d\x80\x91\x32\xb0\xd0\xa5\x17\x48\xf3\x5c\x37\xf0\x62\x47\x8e\x8b\x54\x3d\xf5\xee\x28\x52\x07\xc4\x40\x27\xff\x25\xff\xa4\x6f\x9a\xf0\x55\x67\x42\x26\x21\x4b\x4e\x33\x1e\xaf\xc8\x6a\xd4\xfd\x05\x77\x7b\xfc\xd8\x1f\xf0\x6d\xf7\x7e\x88\x00\x2d\xe5\xaf\xc4\x84\xeb\x1a\xef\x79\xbb\x01\x94\xda\xd4\x1c\x9f\x60\x13\x48\xb2\xce\x45\x78\xfa\xec\x2a\x01\x36\xe1\x54\x7d\x1c\x2e\x7e\xbe\x1c\x63\xd6\x3a\x71\x91\x2d\xab\x94\x3c\x6a\xfc\xba\x5b\x56\xf9\xbe\x67\x11\xee\x01\x9e\x01\xd6\xd5\xa9\xb6\x25\x39\x61\x28\xe2\x64\xa7\x94\x29\x7a\x6d\x4b\xc0\xd8\x1b\x65\xdc\x8e\xf1\xdf\xec\x9c\x64\x5e\xc8\xfa\xff\xca\xaf\x8d\x1e\x10\xd3\x8b\x93\xfd\x35\x3f\x01\x00\x00\xff\xff\xe8\x2a\xfe\x84\x29\x01\x00\x00"),
		},
		"/router.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "router.tmpl",
			modTime:          time.Date(2019, 8, 27, 7, 31, 3, 329829469, time.UTC),
			uncompressedSize: 468,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xd1\x6a\xb3\x40\x10\x85\xaf\xb3\x4f\x71\x58\xe4\x27\xf9\xb1\xfb\x00\x85\x5e\x94\x46\x12\xa1\xad\x92\xd8\xeb\xb2\xc4\x51\x97\xda\x55\xd6\xb1\x2d\xc8\xbe\x7b\x71\x0d\x6d\x02\xf5\xee\x3b\xce\x9c\x73\x76\xa6\x09\x51\xef\xa8\x32\x5f\xb8\xbd\xc3\xfa\x49\xbf\x51\x5a\x92\x65\x53\x19\x72\x50\xa9\xad\x3a\x55\x18\x6e\x69\x03\xef\x85\xa8\x46\x7b\xc2\x81\x6a\x33\x30\xb9\x43\x37\x32\x0d\x6b\x87\xff\xb5\xb1\x2a\xb1\xb5\xb1\x14\x43\xf7\x06\x17\xae\xde\x6f\x30\x09\x80\x66\xff\x7f\x57\x3f\x8e\xe4\x3e\xc8\x4d\xba\x37\x5e\x88\xd5\x34\xdd\xc0\x69\x5b\x13\xa2\xd1\xb5\x31\xa2\xb0\xa1\x72\xcd\xcd\xe0\xbd\x58\x01\xc0\xc5\xcc\x3b\x71\xd3\x95\x31\xa2\x3e\x14\x2f\xcd\x89\x21\xf3\xec\x58\x48\x44\xa4\xf2\x6e\x60\xc8\x5d\xb2\xd0\x8e\x18\x72\x9b\x3c\x26\x45\x12\x78\x4b\x2d\x31\x41\xe6\x2f\xe7\xe9\x71\xde\xbd\x2f\x1e\xf6\x0b\x6a\x3e\x35\x90\x59\x5e\xa4\xd9\xf3\x31\x48\x59\xcf\xa6\xb3\x43\x38\xc2\x4f\x93\x4f\xc3\xcd\x9c\xef\xbd\x00\x9c\xda\x6b\x5b\xb6\xb4\x96\xf3\x1b\x97\x76\xf0\x5e\xc6\x08\xc2\xe8\xda\x85\x48\xbd\x5e\x1d\x61\x21\x95\xf5\xe4\xf4\x9c\x91\x6e\x67\x71\xf1\x72\x1b\x81\xf3\x37\xe7\x91\x2d\x43\xd4\x5f\xca\x2f\x79\xf1\x1d\x00\x00\xff\xff\xf4\xa5\x62\x36\xd4\x01\x00\x00"),
		},
		"/types.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "types.tmpl",
			modTime:          time.Date(2019, 8, 27, 7, 8, 1, 673651083, time.UTC),
			uncompressedSize: 727,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x41\x4e\xf3\x30\x10\x85\xf7\x3e\xc5\xc8\xea\xa2\x95\xfe\xe6\x00\x95\xba\xf8\xd5\x15\x8b\x22\x04\x1c\xa0\x56\xfc\x1a\x0c\x8d\x6d\x6c\x03\xaa\xac\xb9\x3b\x72\x9c\x96\x50\x65\xc5\x2e\x8a\xfd\x7d\xe3\xf7\x34\x39\xaf\x49\xe3\x68\x2c\x48\xb6\xae\xf7\xce\xc2\xa6\xa7\xf6\x05\xbd\x92\xc4\x2c\xca\xb9\x39\x12\xde\xa9\xd1\x88\x6d\xf3\x7c\xf6\x20\x19\x53\x30\xb6\x93\xb4\x66\x16\xa9\xfc\xc9\xb9\xb1\xaa\x07\x33\xd5\x23\x91\x33\xe1\x14\x31\xc3\x1a\x9b\xd0\x21\xfc\x0d\x56\x21\xa8\xf3\x2c\x9a\x33\x2d\x77\xce\x7e\x22\xa4\xe1\xea\x62\xc0\x56\x35\xc3\x55\x57\x5d\xff\xb5\x36\xc9\x38\xab\x4e\x0f\xc1\x79\x84\x64\x10\xe7\x9c\x5b\x7a\x8d\xce\x36\x8f\xea\x6b\x8f\x18\x55\x87\xab\x6a\xfe\xed\x1f\x6d\xa2\x2c\x88\x4a\x69\x41\xd9\x0e\xb4\xf0\xc1\xf9\x72\xe1\x5f\xfd\xa4\xcd\x76\x7c\xc3\x64\x32\xb3\x20\xaa\xd4\xc2\xab\xa0\x7a\x24\x84\x7b\xd5\xa3\xdc\x5e\xee\xd5\x1b\xee\x34\x6c\x32\x47\x83\xf0\x63\x5c\xcd\x73\x43\xf8\xc2\xfd\x2a\xa3\x40\x13\xe0\x76\x4e\xed\xef\x46\xc2\x4c\x87\x92\x7f\x23\x73\xbe\x4e\x65\x96\x87\x31\x21\xac\x66\x16\xb5\x5e\xab\x2f\xcb\x52\xff\x0a\x21\x26\x25\x8c\x05\x94\xdc\x43\x01\xbb\xcb\xa2\xc5\xa6\xae\x5a\x1c\xe1\x84\xde\x9f\x54\x9a\xdb\xc5\xa5\x36\x6d\x22\x59\x54\xb2\x1a\x49\x16\xa1\x1c\xbd\x43\x3a\x91\x73\x9d\xff\x1d\x00\x00\xff\xff\xc4\x91\x7f\x4d\xd7\x02\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/handlers.tmpl"].(os.FileInfo),
		fs["/interface.tmpl"].(os.FileInfo),
		fs["/main.tmpl"].(os.FileInfo),
		fs["/router.tmpl"].(os.FileInfo),
		fs["/types.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
