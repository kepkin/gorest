// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package pkg

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 10, 10, 15, 4, 20, 742960268, time.UTC),
		},
		"/handlers.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "handlers.tmpl",
			modTime:          time.Date(2019, 10, 10, 15, 4, 20, 742239887, time.UTC),
			uncompressedSize: 3789,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x5f\x6f\xdb\x36\x10\x7f\xb6\x3f\xc5\x55\x70\x3b\x69\x50\xd8\x0e\x28\xfa\x90\xc2\x03\xda\xc4\x4d\xbd\xb5\xb1\x17\xbb\xdb\x43\x51\x24\xac\x74\xb2\xb9\xc9\x94\x42\x52\x69\x0b\x55\xdf\x7d\x38\x52\x96\x25\x5b\x4b\xeb\x01\x7b\x98\x9e\x44\xea\xc7\xfb\xf7\xbb\x3b\x9e\xca\x12\x46\xb9\xc2\x44\x7c\x86\xd3\x31\xf8\x6f\xf9\x5f\x38\x8d\x51\x1a\x91\x08\x54\xc0\xa6\x32\xc9\xd8\x52\x98\x14\x03\xa8\xaa\xe1\x70\x58\x96\x27\x10\x63\x22\x24\x82\xb7\xe6\x32\x4e\x51\x9d\x63\x94\x7a\xf4\x35\x29\x64\x04\xbe\x46\x75\x87\x0a\xca\x92\x39\xb9\x55\xb5\xb0\x3b\x01\x5c\xb7\xf6\xec\x3b\x37\x6b\x36\xcb\x51\x71\x23\x32\x39\x3d\xaf\xaa\xeb\xd7\x4e\xa4\x1f\xc1\x8f\x2b\x21\xd9\x59\x26\x0d\x7e\x36\x01\x94\x43\x00\x00\x21\x43\x40\xa5\xc8\x52\x32\xb4\x57\xc4\x15\xde\xfa\x51\xe0\xe0\x09\xa4\x28\x7d\x54\x2a\x80\x9f\xe1\x49\x2d\x64\xfb\xdc\x71\x45\xc2\xde\xea\x15\x68\xa3\x84\x5c\x69\xf6\xb2\x10\x69\x8c\xaa\x03\x4b\x32\x05\x82\x34\x2a\x2e\x57\x68\xd5\x77\xe5\x58\xd0\xc6\xb0\x57\xb9\x12\xd2\xa4\xd2\x7f\xe4\xa4\x5a\x53\xdf\x8b\x0f\x6c\xa2\x54\xa6\xfc\x20\xe8\x9c\xaa\xec\x6a\x30\x88\xd8\x2f\x8b\xd9\xa5\xbf\x36\x26\x67\x0b\xc3\x4d\xa1\x5f\xf2\xf8\x0a\x6f\x0b\xd4\x26\x24\xc3\x8a\xc8\xd4\x0a\x07\x83\x81\x15\x55\x9b\x0b\x37\x7f\xea\x4c\x9e\x7a\x48\x7b\xde\x4d\x0d\xa9\x4a\xa7\x9d\x2d\x2c\xc8\x0f\xaa\xa0\xfe\xa2\xd0\x14\x4a\xba\x85\xd3\xee\x98\x62\x0b\x75\xc7\x7a\x43\xe9\x53\xbc\xa3\x60\x58\x59\xd6\x51\xc6\x07\x19\xa0\xf0\x76\x61\x4d\x6c\x72\x80\xe4\x12\x62\xe4\x4c\xbf\xe4\x1b\xb4\x89\x65\x83\x03\x6d\xf9\xe0\x5d\xe1\xad\x17\xc0\x49\x55\x0d\xcd\x97\x1c\x81\x52\xb1\x75\xaa\xaa\xba\xee\x93\x54\xc7\xc1\x28\xe7\x8a\x6f\xd0\xa0\xcd\x04\x36\xdf\xae\x74\x5b\x7f\x83\x69\x4c\xd8\xcb\xed\x1d\x82\x11\x24\xd8\x59\xbf\x7f\xb8\xaa\xba\x9b\x6c\x11\xad\x71\xc3\xd9\x45\xb6\x24\xbb\x5b\x5a\xeb\x18\x6d\x97\x9f\x84\x59\x03\xab\xd9\x7c\x99\xc5\x5f\xb6\xd8\x3d\x7f\x22\x4a\x73\x69\x48\x5a\x08\xa3\x8f\x04\x24\xc7\xce\xdc\xf6\xf6\x90\x15\x40\x86\x10\xa0\xdf\x86\xae\x1d\xdd\x55\xc3\xe2\x61\x21\x47\x99\x74\xa1\xce\x54\x87\xc8\x63\xa9\xdc\xfa\xde\xf2\x7e\x99\x9d\xed\x84\x5b\x53\x99\x65\xdc\x35\x0b\x57\xc5\x7b\xb4\x1f\x14\xbf\xaf\x50\x43\x59\xb6\x50\x55\x65\xab\x2b\x53\x6f\x84\x36\xf0\xfe\x83\x7d\xdf\x76\x89\xba\xb0\x1d\xc0\xee\x5c\xc3\x98\x56\xce\xb8\xc7\x8f\xe1\xdd\xd5\x14\x3e\x0a\x19\x0b\xb9\x1a\x6e\x6b\xfc\x3a\x04\x4b\xf0\xae\xd4\x23\x97\x59\xba\x55\xef\xfa\x93\x30\xd1\xda\x01\xd9\xaf\xf8\xa5\xf5\xa9\x45\xa7\x0c\x61\x64\x43\xc5\xa6\x72\xce\xcd\xba\xcd\x4e\xc4\x35\x82\x47\x3e\x4b\xa8\x2a\xef\xb4\xd3\x14\x14\x6a\x56\x96\xb0\x9f\xa8\x84\x84\x71\xad\xf5\x77\x9e\x16\x38\x1c\x0e\x06\x7b\xf9\x46\x4f\x8c\x09\x2f\x52\xd3\x15\xba\x8b\xd3\x18\x78\x9e\xa3\x8c\xfd\x66\x2b\xb4\x9d\xcb\x76\x95\xc4\xf7\xde\x49\xfc\x9c\x63\x64\x30\x86\x42\x09\x68\xf2\xfd\x14\x6e\x1e\xea\x1b\x2f\xdc\xf9\xdd\x6a\x66\xce\xb5\x56\xd2\xf7\x04\xe1\xb7\x02\xd5\x41\xee\x8b\x04\xf0\x16\x46\xc8\x6c\x56\x78\x42\x1a\x5c\xa1\xf2\xda\xb0\x03\xe8\xab\x4c\x6d\xb8\xb1\xe0\x67\x4f\x1b\xe8\x3d\x61\x73\xf7\xc5\x98\x3a\x49\x94\xc9\x3b\x62\x54\xe3\x54\x1a\x3f\x62\xd6\x28\x7f\x47\x45\x10\xc2\x4f\x4f\x42\x78\xf6\xb4\xb9\x3c\xe8\xe8\x83\x31\x48\x91\xb6\x78\xbe\x3f\x9c\xf6\x55\xb3\x3f\x14\xcf\x69\x3b\x04\x6f\x62\x43\x4a\xfd\xda\x1a\x0d\x42\xc2\x4e\x65\x30\xdc\x85\xb0\x53\xbf\xa9\xc6\xe3\x9d\x7b\x61\x32\xd1\xe7\xd8\x7f\xe8\x10\x51\xf6\x9d\x2e\x35\x2d\xe9\x38\x27\x61\x0c\x3d\x2e\xf5\x74\xbb\xfd\x82\xf8\x87\x5c\x7c\x8d\x3c\x46\xf5\x1d\xa9\x63\x15\xd7\xbd\x9b\xb9\x53\xec\x02\x4d\xc7\x8a\xb6\xce\x41\x9d\xa9\x8c\xfa\x34\x9d\x13\x0a\xe3\xa6\x25\x8a\x64\x27\x0d\xc6\x8e\x83\xaf\x5f\x5b\x1a\x6c\x77\x1f\x1f\x47\x4e\xbb\x78\xed\x79\xa1\x81\x7f\xd4\x28\x4d\x97\x87\x9e\xc8\x88\x04\x64\x66\x9c\xb1\x47\x1a\xf9\x60\x0c\x76\x5c\xb9\xcc\xdc\x8d\xf4\x2f\x8c\x6d\x75\x1a\xba\xcc\xbe\x69\x6d\xef\x3d\xe9\x18\xed\x38\x50\xf7\xe7\xc8\xd0\xa7\x7e\xf6\xea\x4b\xf5\x84\x84\x78\xc1\x73\x68\xe6\x0b\xd7\x99\x79\x9e\xa7\x22\xb2\xf7\xda\x63\x9a\xaf\x5a\x1d\x3a\xc6\x88\xc4\xd2\x2e\xbb\xc4\x4f\xe7\x18\x65\x31\x8d\xaa\x9d\xe8\xd4\xd3\x56\x5d\x6c\xa7\x63\x3a\xc5\x1c\xd4\x7f\x44\xd9\x66\x41\xcf\x0f\x4b\x71\x30\x38\xb6\x10\xcf\xb8\xfc\xc1\x80\xed\x68\x40\x43\xe4\x36\x8a\xf5\x74\x77\x70\x19\x1c\x43\x8f\x2e\xf2\x3c\x53\xc4\x4f\x1d\xf3\x13\x1a\xd1\x4e\xe1\xe1\x9d\x17\x42\x64\xee\xe3\xab\x9e\x33\x7b\x06\x8f\x66\xee\xa8\xe9\x2c\x54\xda\xd0\x48\xf7\xa4\xee\xa1\x7c\x83\x66\x9d\xc5\x21\x8c\x72\x3b\x7b\xc4\x22\x32\xe0\xcd\x67\x8b\xa5\x47\xf7\xc1\x3c\xd3\x06\xbc\x8b\x89\x5b\x5d\xa0\x01\xef\x7c\xf2\x66\xb2\x9c\xd8\xf5\x39\xa6\x68\x10\xbc\xf9\xbb\x1a\x5d\xd0\xd9\x17\xcb\xb3\xd7\x6e\xc9\x29\x57\xbc\xd9\x7c\x39\x9d\x5d\x2e\xec\xd6\x2c\x27\xe2\x75\xb0\x7f\x57\xd9\x51\x66\x94\xd3\x76\x59\x1a\xdc\xe4\x29\x37\xfb\x3f\x40\x5b\xe3\xdc\x1f\x8e\xd7\xfc\x56\x79\x34\x58\xd3\x12\x0e\xc4\xf6\x8d\x69\xc7\x04\xeb\xff\x14\xab\xbd\x5f\x05\x07\xe8\x20\x0e\xa6\xd0\x1a\xf3\xad\x88\xed\xde\xfe\x0e\x00\x00\xff\xff\x95\x0d\xd3\x5e\xcd\x0e\x00\x00"),
		},
		"/interface.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "interface.tmpl",
			modTime:          time.Date(2019, 9, 2, 9, 48, 32, 932831877, time.UTC),
			uncompressedSize: 586,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xcd\x6e\xab\x30\x10\x85\xf7\x3c\xc5\x91\xc5\x22\xb9\x4a\xc8\xfe\x4a\x77\x71\x95\xa0\x14\xa9\x29\xa8\xd0\x07\xb0\x60\x08\x56\x89\xa1\x66\x92\xb6\xb2\xfc\xee\x15\x3f\x49\xab\x26\x52\xbb\xf3\x8c\xe7\xe7\x3b\x67\x3c\x6b\x97\x28\xa8\x54\x9a\x20\x94\x66\x32\xa5\xcc\x69\x47\x5c\x35\x85\xc0\xd2\x39\x0f\x00\xac\x0d\xe2\x96\x8c\x64\xd5\xe8\x68\xe3\xdc\x4c\xe9\xab\xdc\x23\xbd\x2c\x90\xe3\xcf\x5e\xe9\x60\xdd\x68\xa6\x37\x9e\x0f\xd3\x49\x17\xce\x79\x1e\xbf\xb7\x04\x6b\xb1\x93\xcf\x14\x15\xa4\x59\x95\x8a\x0c\x82\x48\x97\x4d\x90\x29\xae\x09\xce\xe1\x82\x00\x3b\x6d\x5e\xc2\x48\xbd\x27\xf8\x47\x53\x2f\xe0\x13\xfe\xfe\x43\x90\x48\xae\xba\x09\xee\x5b\xd9\x61\x60\x5f\xc0\x6f\xfb\xca\x59\xa1\x72\x86\x48\xe2\x34\x13\xf0\x29\x48\x9a\x8e\x21\xb6\xe1\x18\x6d\x89\x21\x36\xe1\x7d\x98\x85\x43\xbc\xa1\x9a\x98\x20\x92\xa7\xa9\xfa\xd8\xf7\xfe\xcf\xd6\x77\x63\x28\x39\xaf\x20\xe2\x24\x8b\xe2\x87\x74\x48\xc5\x6d\xaf\xbf\x9b\xe3\x0b\xcc\x19\xe8\x55\x71\xd5\x63\x4c\x5f\xab\x55\x2f\xbf\x35\x4a\xf3\x99\x12\x02\x62\x10\x86\x8b\xd1\x4c\x87\xb6\x96\x7c\xeb\x1a\xe3\xa8\xab\x35\xa3\xbf\xb7\x32\x9f\xef\xdf\xfa\x9f\x92\x39\x91\x41\xc7\xe6\x98\xf3\x74\x82\xd4\x9c\xf0\x63\xa3\xe7\x3e\x02\x00\x00\xff\xff\x86\x24\xe5\x8a\x4a\x02\x00\x00"),
		},
		"/main.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "main.tmpl",
			modTime:          time.Date(2019, 10, 10, 12, 35, 56, 874917379, time.UTC),
			uncompressedSize: 335,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xce\x31\x4e\x43\x31\x0c\xc6\xf1\xb9\x39\x85\x95\x09\x86\x26\x07\x60\xa4\x0c\x2c\x74\xe9\x05\xd2\x3c\xd7\x2f\xf4\xc5\x8e\x1c\x17\xa9\x7a\xea\xdd\x51\xa4\x0e\x08\x24\x3a\xf9\x2f\x7d\xbf\xc1\x31\xc2\xab\x4c\x08\x84\x8c\x9a\x0c\x27\x38\x5e\x81\x44\xb1\xdb\x0b\xec\xf6\xf0\xb1\x3f\xc0\xdb\xee\xfd\x10\x9c\x6b\x29\x9f\x13\x21\xac\x6b\xb8\xe7\xed\xe6\x5c\xa9\x4d\xd4\xe0\xc9\x6d\x3c\x72\x96\xa9\x30\xc5\xcf\x2e\xec\xdd\xc6\x9f\xaa\x8d\x43\xc5\xe6\xcb\x31\x64\xa9\x91\x0a\x6f\x49\xb8\xe4\x51\xbf\xb6\x76\xa6\x88\xaa\xa2\x7d\x0c\x8c\x16\x67\xb3\x36\xba\x9b\x66\xe1\xaf\x7b\x16\xa6\xee\xdd\xb3\x73\xeb\x6a\x58\xdb\x92\x0c\xc1\x17\x36\xd4\x53\xca\x18\xac\xb6\xc5\x43\xe8\x0d\x33\x6c\xc7\x87\x3f\xd9\x9c\x78\x5a\x50\xfb\xff\xca\xae\x0d\x1f\x10\x95\x8b\xa1\xfe\x31\xdf\x01\x00\x00\xff\xff\x11\x14\x09\xbf\x4f\x01\x00\x00"),
		},
		"/router.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "router.tmpl",
			modTime:          time.Date(2019, 9, 2, 9, 48, 32, 933059739, time.UTC),
			uncompressedSize: 479,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x50\xd1\x4a\xc3\x40\x10\x7c\xee\x7d\xc5\x70\x04\x69\x25\xde\x07\x08\x3e\x48\x1b\xda\x80\x9a\xd0\xa6\xcf\x72\x34\x9b\xe4\x30\x5e\xc2\xe5\x52\x85\x70\xff\x2e\x77\x29\xda\x82\xfb\x36\xb3\xbb\x33\xb3\x3b\x4d\x88\x7a\x43\x95\xfa\xc6\xe3\x13\x96\xaf\xf2\x83\xd2\x92\xb4\x55\x95\x22\x03\x91\xea\xaa\x13\x85\xb2\x2d\xad\xe0\x1c\x63\xd5\xa8\x4f\xd8\x53\xad\x06\x4b\x66\xdf\x8d\x96\x86\xa5\xc1\x7d\xad\xb4\x48\x74\xad\x34\xc5\x90\xbd\xc2\x95\xaa\x73\x2b\x4c\x0c\x20\xaf\x7f\x77\xd3\x38\x90\x39\x93\x99\x64\xaf\x1c\x63\x8b\x69\x7a\x80\x91\xba\x26\x44\xa3\x69\x63\x44\x61\x43\xe4\xd2\x36\x83\x73\x6c\x01\x00\x57\x33\x9f\x64\x9b\xae\x8c\x11\xf5\x21\x78\xa9\x4e\x16\x3c\xcf\x0e\x05\x47\x44\x22\xef\x06\x0b\xbe\x4d\x66\xb4\x25\x0b\xbe\x49\x5e\x92\x22\x09\x78\x43\x2d\x59\x02\xcf\x8f\x97\xe9\xd1\xef\x3e\x17\xeb\xdd\x0c\xa5\x3d\x35\xe0\x59\x5e\xa4\xd9\xdb\x21\x50\x59\x6f\x55\xa7\x87\xf0\x84\xdf\x24\x5f\xca\x36\xde\xdf\x39\x06\x18\xb1\x93\xba\x6c\x69\xc9\xfd\x8d\x73\x3a\x38\xc7\x63\x78\x62\xdd\xe9\x33\x19\x7b\x34\x6d\xb8\x6e\x6e\x90\x78\xbf\xf9\xc7\x8c\x44\xd6\x93\x91\xde\x2e\xdd\x78\x72\x96\x35\x2b\x86\x4b\x79\x6b\xd2\x65\x70\xfd\x8f\xf9\x43\x8e\xfd\x04\x00\x00\xff\xff\xbe\x70\x58\x84\xdf\x01\x00\x00"),
		},
		"/types.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "types.tmpl",
			modTime:          time.Date(2019, 10, 10, 14, 47, 57, 530566571, time.UTC),
			uncompressedSize: 1038,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x53\xcb\x4e\xc3\x30\x10\xbc\xe7\x2b\x56\x51\x0f\x09\x2a\xf9\x80\x4a\x39\xa0\x1e\x80\x43\x11\xe2\x71\xa6\x4b\xb2\x69\x5d\x62\x3b\xd8\x2e\x08\x59\xfe\x77\x94\x87\xf3\x28\xa9\xe0\x42\x4e\xf6\x7a\x76\x66\x77\xb2\x6b\xed\x25\xe4\x54\x30\x41\x10\x66\x92\x57\x52\x90\x30\x8f\xd9\x9e\x38\x86\xe0\x5c\x00\x00\x50\x63\x58\x01\xf4\x0e\x89\x6e\x5e\x92\xa7\xaf\x8a\x20\x94\xaf\x07\xca\x4c\x0f\x1b\x41\x3d\xee\x2a\xcf\x99\x61\x52\x60\x79\xaf\x64\x45\xca\x30\xd2\x63\x78\xfd\x99\x9a\xcb\xda\x2e\xe5\x0e\x39\x39\x07\x29\x1c\xb4\x14\xc9\x03\x7e\x6e\x48\x6b\xdc\xd1\x44\x81\x4a\x4d\x7f\xa2\xd1\x46\x1d\x33\x03\x76\x82\x6c\x39\x14\x8a\x1d\xc1\xa2\x52\xb2\x12\xc8\x69\xd9\x1e\x61\x95\xf6\xc5\x9f\x2f\xd9\x73\x2c\x2a\x54\xc8\xc9\x90\xaa\xf5\xea\xdc\x68\x83\x6f\x74\x9b\x93\x30\xac\x60\xa4\x06\xfe\xf8\x77\x8e\xc6\xd4\x55\xda\xe6\x24\xd7\xb2\xb9\xcf\x66\x9d\x0a\x3b\x37\x0d\x76\x99\xb0\xad\x4d\x5c\x85\xcd\x5b\x57\x07\x38\x17\x6e\x67\xec\x20\x91\x9f\x48\xb9\x20\xf8\x0f\xcf\x58\xd1\x35\x78\x83\x7a\x7d\xd4\x46\xf2\x73\x7d\xd6\xdf\x07\x2a\x78\x69\x67\xe1\x59\x70\x54\x7a\x8f\x25\x29\x48\x21\xba\xf0\x5d\x0d\x4e\xc5\x91\x60\x65\x3c\xab\xfa\xb3\xbd\x2e\x7a\x3a\xbc\xa3\xd0\xdc\xa4\xcd\x4e\x99\xb5\x7d\xff\xd3\xbf\x36\x22\x1c\x1d\x03\x6b\xbd\x93\x03\xcd\xd2\x5f\x1a\x37\xd7\x7e\x13\x75\xd2\xee\xa2\x1e\x53\x1a\xe2\x55\x89\x66\x6e\x63\xa3\x9c\x65\x06\xc2\x81\x37\x1c\x8b\xf8\x87\x3e\x08\x71\x5b\x9b\x2f\xed\x3b\x00\x00\xff\xff\x6c\x7a\x75\xd2\x0e\x04\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/handlers.tmpl"].(os.FileInfo),
		fs["/interface.tmpl"].(os.FileInfo),
		fs["/main.tmpl"].(os.FileInfo),
		fs["/router.tmpl"].(os.FileInfo),
		fs["/types.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
