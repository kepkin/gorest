{{ $prefix := (MakeIdentifier .Info.Title) }}


{{- define "handlerDecl" }}
func (server {{.prefix}}Server) _{{.prefix}}_{{.path.OperationID}}_Handler(c *gin.Context) {
    in, err := Make{{.path.OperationID}}Req(c)
    if len(err) > 0 {
            var errMsg strings.Builder
            for i := range err {
                fmt.Fprintln(&errMsg, err[i].Error())
            }
    		c.JSON(http.StatusBadRequest, struct {
    			Error string `json:"error"`
    		}{errMsg.String()})
    		return
    	}
    server.Srv.{{.path.OperationID}}(in, c)
}
{{- end}}


{{- define "reqStructDecl" }}
    {{- $structName := (print .OperationID "Req") -}}
type {{ $structName }} struct {
    {{- range $parameter := .Parameters}}
    {{- $parameterName := (MakeIdentifier $parameter.Name) }}
    {{ $parameterName }} {{ $parameter.Schema.GoType }}
    {{- end}}

    {{- with .RequestBody }}
        {{- range $contentType, $body := .Content }}
    Body {{ $body.Schema.GoType }}
        {{- end}}
    {{- end}}
}
{{- end }}


{{- define "constructorDecl" }}
      {{- $structName := (print .OperationID "Req") }}

      {{- with ToConstructorType . -}}

func Make{{ $structName }}(c *gin.Context) (res {{$structName}}, errorList []error) {
    var err error
    _ = err

    // URI binding
    for _, param := range c.Params {
        switch param.Key {
        {{- range $n, $e := .InPath }}
        case "{{ $n }}":
            res.{{ MakeIdentifier $n }} = param.Value

		{{- end}}

        default:
            errorList = append(errorList, fmt.Errorf("Unexpected uri parameter: `%s`", param.Key))
        }
    }

    {{- range $n, $e := .InQuery }}
        {{- if eq $e.Type "integer" }}
            {{- if eq $e.Format "int64" }}
    res.{{ MakeIdentifier $n }}, err = strconv.ParseInt(c.Query("{{ $n }}"), 10, 64)
    if err != nil {
        errorList = append(errorList, errors.Wrap(err, "Expecting int64 in {{ $n }}"))
    }
            {{- else}}
    res.{{ MakeIdentifier $n }}, err = strconv.Atoi(c.Query("{{ $n }}"))
    if err != nil {
        errorList = append(errorList, errors.Wrap(err, "Expecting integer in {{ $n }}"))
    }
            {{- end}}
        {{- else}}
    res.{{ MakeIdentifier $n }} = c.Query("{{ $n }}")
        {{- end}}
	{{- end}}

    {{- range $n, $e := .InHeader }}
    res.{{ MakeIdentifier $n }} = c.Request.Header.Get("{{ $n }}")
	{{- end}}

	{{- if .BodyRequired }}

    if c.Request == nil || c.Request.Body == nil {
        errorList = append(errorList, fmt.Errorf("Body is absent"))
    }
    {{- end}}

    {{- if not .Body }}

    if c.Request == nil || c.Request.Body != http.NoBody {
        errorList = append(errorList, fmt.Errorf("Unexpected body"))
    }
    {{- end}}

    {{- range $contentType, $e := .Body }}

    switch ct := c.Request.Header.Get("Content-Type"); ct {
    case "application/json":
        dec := json.NewDecoder(c.Request.Body)
    	if err := dec.Decode(&res.Body); err != nil {
    		errorList = append(errorList, errors.Wrap(err, "Can't Parse JSON"))
    	}
    default:
        errorList = append(errorList, fmt.Errorf("Unsupported content-type: %v", ct))
    }
    {{- end}}

    return
{{- end}}
}
{{- end}}


{{- range $url, $e := .Paths}}

    {{- range $method, $p := (dict "POST" $e.Post "GET" $e.Get "DELETE" $e.Delete "PUT" $e.Put "PATCH" $e.Patch "OPTIONS" $e.Options) }}
        {{- with $p }}
{{template "handlerDecl"  (dict "prefix" $prefix "path" $p ) }}
        {{- end}}
    {{- end}}

{{- end}}


{{- range $url, $e := .Paths}}
    {{- range $method, $p := (dict "POST" $e.Post "GET" $e.Get "DELETE" $e.Delete "PUT" $e.Put "PATCH" $e.Patch "OPTIONS" $e.Options) }}
        {{- with $p }}
{{template "reqStructDecl" $p }}

{{template "constructorDecl" $p }}

        {{- end}}
    {{- end}}
{{- end}}
