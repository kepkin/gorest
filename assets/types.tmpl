{{- define "componentSchema" }}
    {{- if eq .schema.Type "object" }}
        {{- if .schema.Properties }}
            type {{.schemaName}} struct {
              {{- range $propname, $prop := .schema.Properties }}
                {{- $parameterName := (MakeIdentifier $propname) }}
                {{- $parameterType := $prop.GoType }}
                {{ $parameterName }} {{ $parameterType }} `json:"{{ $propname }}"`
              {{- end}}
            }
        {{- else }}
            type {{.schemaName}} = json.RawMessage
        {{- end }}
    {{- else }}
        type {{.schemaName}} {{ .schema.GoType }}
    {{- end }}
{{- end }}

// Components

{{ range $schemaName, $schema := .components }}
    {{- template "componentSchema" (dict "schemaName" $schemaName "schema" $schema ) }}
{{ end }}

// Types derived from `object` properties
{{ range $, $schema := .specialTypes }}
    {{- template "componentSchema" (dict "schemaName" $schema.GoType "schema" $schema ) }}
{{ end -}}

// Types derived from user defined `format`
{{ range $, $typeName := .customTypes }}
    var _ json.Unmarshaler = (*{{ $typeName }})(nil)
{{ end -}}
