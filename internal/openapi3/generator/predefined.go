package generator

const Predefined = `// Code generated by gorest; DO NOT EDIT.

package %s

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strconv"
	"strings"

	"github.com/gin-gonic/gin"
	"github.com/pkg/errors"
)

type ParamPlace int

const (
	Query ParamPlace = iota
	Path
	Cookie
	Header
)

type FieldError struct {
	Field   string ` + "`" + `json:"string"` + "`" + `
	Message string ` + "`" + `json:"message"` + "`" + `
	Reason  string ` + "`" + `json:"reason"` + "`" + `
}

func ExtractParameter(c *gin.Context, paramName string, from ParamPlace) string {
	switch from {
	case Query:
		return c.Query(paramName)

	case Path:
		return c.Param(paramName)

	case Cookie:
		return c.Request.Cookie(paramName)

	case Header:
		return c.Request.Header.Get(paramName)
	}
}

func ExtractParameterWithDefault(c *gin.Context, paramName string, from ParamPlace, defaultValue interface{}) interface{} {
	switch from {
	case Query:
		return c.DefaultQuery(paramName)

	case Path:
		pathParam, ok := c.Params.Get(paramName)
		if !ok {
			return defaultValue
		}
		return pathParam

	case Cookie:
		cookie, err := c.Request.Cookie(paramName)
		if err != nil && err.(ErrNoCookie) {
			return defaultValue
		}
		return cookie.Value

	case Header:
		header := c.Request.Header.Get(paramName)
		if header == "" {
			return defaultValue
		}
		return header
	}
}`
